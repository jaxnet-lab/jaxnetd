// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jaxjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson(in *jlexer.Lexer, out *TxRawResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hex":
			out.Hex = string(in.String())
		case "txid":
			out.Txid = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "size":
			out.Size = int32(in.Int32())
		case "vsize":
			out.Vsize = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "version":
			out.Version = int32(in.Int32())
		case "locktime":
			out.LockTime = uint32(in.Uint32())
		case "vin":
			if in.IsNull() {
				in.Skip()
				out.Vin = nil
			} else {
				in.Delim('[')
				if out.Vin == nil {
					if !in.IsDelim(']') {
						out.Vin = make([]Vin, 0, 0)
					} else {
						out.Vin = []Vin{}
					}
				} else {
					out.Vin = (out.Vin)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Vin
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson1(in, &v1)
					out.Vin = append(out.Vin, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vout":
			if in.IsNull() {
				in.Skip()
				out.Vout = nil
			} else {
				in.Delim('[')
				if out.Vout == nil {
					if !in.IsDelim(']') {
						out.Vout = make([]Vout, 0, 0)
					} else {
						out.Vout = []Vout{}
					}
				} else {
					out.Vout = (out.Vout)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Vout
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson2(in, &v2)
					out.Vout = append(out.Vout, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "in_amount":
			out.InAmount = int64(in.Int64())
		case "out_amount":
			out.OutAmount = int64(in.Int64())
		case "fee":
			out.Fee = int64(in.Int64())
		case "blockhash":
			out.BlockHash = string(in.String())
		case "confirmations":
			out.Confirmations = uint64(in.Uint64())
		case "time":
			out.Time = int64(in.Int64())
		case "blocktime":
			out.Blocktime = int64(in.Int64())
		case "chainName":
			out.ChainName = string(in.String())
		case "coinbase_tx":
			out.CoinbaseTx = bool(in.Bool())
		case "orphan_tx":
			out.OrphanTx = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson(out *jwriter.Writer, in TxRawResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hex != "" {
		const prefix string = ",\"hex\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hex))
	}
	if in.Txid != "" {
		const prefix string = ",\"txid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txid))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Vsize != 0 {
		const prefix string = ",\"vsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Vsize))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.LockTime != 0 {
		const prefix string = ",\"locktime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.LockTime))
	}
	if len(in.Vin) != 0 {
		const prefix string = ",\"vin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Vin {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Raw((v4).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Vout) != 0 {
		const prefix string = ",\"vout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Vout {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson1(out, v6)
			}
			out.RawByte(']')
		}
	}
	if in.InAmount != 0 {
		const prefix string = ",\"in_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.InAmount))
	}
	if in.OutAmount != 0 {
		const prefix string = ",\"out_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OutAmount))
	}
	if in.Fee != 0 {
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Fee))
	}
	if in.BlockHash != "" {
		const prefix string = ",\"blockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BlockHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Confirmations))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Blocktime != 0 {
		const prefix string = ",\"blocktime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Blocktime))
	}
	if in.ChainName != "" {
		const prefix string = ",\"chainName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChainName))
	}
	if in.CoinbaseTx {
		const prefix string = ",\"coinbase_tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CoinbaseTx))
	}
	if in.OrphanTx {
		const prefix string = ",\"orphan_tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OrphanTx))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TxRawResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxRawResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxRawResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxRawResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson2(in *jlexer.Lexer, out *Vout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = float64(in.Float64())
		case "n":
			out.N = uint32(in.Uint32())
		case "scriptPubKey":
			easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson3(in, &out.ScriptPubKey)
		case "precise_value":
			out.PreciseValue = int64(in.Int64())
		case "from_another_shard":
			out.FromAnotherShard = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson1(out *jwriter.Writer, in Vout) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Value))
	}
	if in.N != 0 {
		const prefix string = ",\"n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.N))
	}
	if true {
		const prefix string = ",\"scriptPubKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson2(out, in.ScriptPubKey)
	}
	if in.PreciseValue != 0 {
		const prefix string = ",\"precise_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PreciseValue))
	}
	if in.FromAnotherShard {
		const prefix string = ",\"from_another_shard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.FromAnotherShard))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson3(in *jlexer.Lexer, out *ScriptPubKeyResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asm":
			out.Asm = string(in.String())
		case "hex":
			out.Hex = string(in.String())
		case "reqSigs":
			out.ReqSigs = int32(in.Int32())
		case "type":
			out.Type = string(in.String())
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Addresses = append(out.Addresses, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson2(out *jwriter.Writer, in ScriptPubKeyResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Asm != "" {
		const prefix string = ",\"asm\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Asm))
	}
	if in.Hex != "" {
		const prefix string = ",\"hex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hex))
	}
	if in.ReqSigs != 0 {
		const prefix string = ",\"reqSigs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ReqSigs))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Addresses) != 0 {
		const prefix string = ",\"addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Addresses {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson1(in *jlexer.Lexer, out *Vin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coinbase":
			out.Coinbase = string(in.String())
		case "txid":
			out.Txid = string(in.String())
		case "vout":
			out.Vout = uint32(in.Uint32())
		case "scriptSig":
			if in.IsNull() {
				in.Skip()
				out.ScriptSig = nil
			} else {
				if out.ScriptSig == nil {
					out.ScriptSig = new(ScriptSig)
				}
				easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson4(in, out.ScriptSig)
			}
		case "sequence":
			out.Sequence = uint32(in.Uint32())
		case "txinwitness":
			if in.IsNull() {
				in.Skip()
				out.Witness = nil
			} else {
				in.Delim('[')
				if out.Witness == nil {
					if !in.IsDelim(']') {
						out.Witness = make([]string, 0, 4)
					} else {
						out.Witness = []string{}
					}
				} else {
					out.Witness = (out.Witness)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Witness = append(out.Witness, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "age":
			out.Age = int32(in.Int32())
		case "amount":
			out.Amount = int64(in.Int64())
		case "from_another_shard":
			out.FromAnotherShard = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson3(out *jwriter.Writer, in Vin) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Coinbase != "" {
		const prefix string = ",\"coinbase\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Coinbase))
	}
	if in.Txid != "" {
		const prefix string = ",\"txid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txid))
	}
	if in.Vout != 0 {
		const prefix string = ",\"vout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Vout))
	}
	if in.ScriptSig != nil {
		const prefix string = ",\"scriptSig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson4(out, *in.ScriptSig)
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Sequence))
	}
	if len(in.Witness) != 0 {
		const prefix string = ",\"txinwitness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Witness {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Age))
	}
	if in.Amount != 0 {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Amount))
	}
	if in.FromAnotherShard {
		const prefix string = ",\"from_another_shard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.FromAnotherShard))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson4(in *jlexer.Lexer, out *ScriptSig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asm":
			out.Asm = string(in.String())
		case "hex":
			out.Hex = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson4(out *jwriter.Writer, in ScriptSig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Asm != "" {
		const prefix string = ",\"asm\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Asm))
	}
	if in.Hex != "" {
		const prefix string = ",\"hex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hex))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson5(in *jlexer.Lexer, out *TxOutStatuses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TxOutStatuses, 0, 2)
			} else {
				*out = TxOutStatuses{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 TxOutStatus
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson5(out *jwriter.Writer, in TxOutStatuses) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TxOutStatuses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxOutStatuses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxOutStatuses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxOutStatuses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson5(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson6(in *jlexer.Lexer, out *TxOutStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "outTxHash":
			out.OutTxHash = string(in.String())
		case "outIndex":
			out.OutIndex = uint32(in.Uint32())
		case "found":
			out.Found = bool(in.Bool())
		case "isSpent":
			out.IsSpent = bool(in.Bool())
		case "isMempool":
			out.InMempool = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson6(out *jwriter.Writer, in TxOutStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OutTxHash != "" {
		const prefix string = ",\"outTxHash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OutTxHash))
	}
	if in.OutIndex != 0 {
		const prefix string = ",\"outIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.OutIndex))
	}
	if in.Found {
		const prefix string = ",\"found\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Found))
	}
	if in.IsSpent {
		const prefix string = ",\"isSpent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsSpent))
	}
	if in.InMempool {
		const prefix string = ",\"isMempool\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.InMempool))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TxOutStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxOutStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxOutStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxOutStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson6(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson7(in *jlexer.Lexer, out *TxOperation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input":
			out.Input = bool(in.Bool())
		case "pkScript":
			out.PkScript = string(in.String())
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Addresses = append(out.Addresses, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "idx":
			out.Idx = uint32(in.Uint32())
		case "amount":
			out.Amount = int64(in.Int64())
		case "txHash":
			out.TxHash = string(in.String())
		case "txIndex":
			out.TxIndex = uint32(in.Uint32())
		case "coinbase":
			out.Coinbase = bool(in.Bool())
		case "originTxHash":
			out.OriginTxHash = string(in.String())
		case "originIdx":
			out.OriginIdx = uint32(in.Uint32())
		case "csTx":
			out.CSTx = bool(in.Bool())
		case "shardId":
			out.ShardID = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson7(out *jwriter.Writer, in TxOperation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Input {
		const prefix string = ",\"input\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Input))
	}
	if in.PkScript != "" {
		const prefix string = ",\"pkScript\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PkScript))
	}
	if len(in.Addresses) != 0 {
		const prefix string = ",\"addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Addresses {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Idx != 0 {
		const prefix string = ",\"idx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Idx))
	}
	if in.Amount != 0 {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Amount))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxHash))
	}
	if in.TxIndex != 0 {
		const prefix string = ",\"txIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TxIndex))
	}
	if in.Coinbase {
		const prefix string = ",\"coinbase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Coinbase))
	}
	if in.OriginTxHash != "" {
		const prefix string = ",\"originTxHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginTxHash))
	}
	if in.OriginIdx != 0 {
		const prefix string = ",\"originIdx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.OriginIdx))
	}
	if in.CSTx {
		const prefix string = ",\"csTx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CSTx))
	}
	if in.ShardID != 0 {
		const prefix string = ",\"shardId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ShardID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TxOperation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxOperation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxOperation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxOperation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson7(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson8(in *jlexer.Lexer, out *ShardListResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shards":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Shards = make(map[uint32]ShardInfo)
				} else {
					out.Shards = nil
				}
				for !in.IsDelim('}') {
					key := uint32(in.Uint32Str())
					in.WantColon()
					var v19 ShardInfo
					(v19).UnmarshalEasyJSON(in)
					(out.Shards)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson8(out *jwriter.Writer, in ShardListResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Shards) != 0 {
		const prefix string = ",\"shards\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Shards {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.Uint32Str(uint32(v20Name))
				out.RawByte(':')
				(v20Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShardListResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShardListResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShardListResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShardListResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson8(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson9(in *jlexer.Lexer, out *ShardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "last_version":
			out.LastVersion = int32(in.Int32())
		case "beacon_expansion_height":
			out.BeaconExpansionHeight = int32(in.Int32())
		case "beacon_expansion_hash":
			out.BeaconExpansionHash = string(in.String())
		case "genesis_hash":
			out.GenesisHash = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "p2p_port":
			out.P2PPort = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson9(out *jwriter.Writer, in ShardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	if in.LastVersion != 0 {
		const prefix string = ",\"last_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LastVersion))
	}
	if in.BeaconExpansionHeight != 0 {
		const prefix string = ",\"beacon_expansion_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BeaconExpansionHeight))
	}
	if in.BeaconExpansionHash != "" {
		const prefix string = ",\"beacon_expansion_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BeaconExpansionHash))
	}
	if in.GenesisHash != "" {
		const prefix string = ",\"genesis_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GenesisHash))
	}
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	if in.P2PPort != 0 {
		const prefix string = ",\"p2p_port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.P2PPort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShardInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShardInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson9(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson10(in *jlexer.Lexer, out *SearchRawTransactionsResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SearchRawTransactionsResults, 0, 8)
			} else {
				*out = SearchRawTransactionsResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v21 *SearchRawTransactionsResult
			if in.IsNull() {
				in.Skip()
				v21 = nil
			} else {
				if v21 == nil {
					v21 = new(SearchRawTransactionsResult)
				}
				(*v21).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v21)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson10(out *jwriter.Writer, in SearchRawTransactionsResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v22, v23 := range in {
			if v22 > 0 {
				out.RawByte(',')
			}
			if v23 == nil {
				out.RawString("null")
			} else {
				(*v23).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SearchRawTransactionsResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchRawTransactionsResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchRawTransactionsResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchRawTransactionsResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson10(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson11(in *jlexer.Lexer, out *SearchRawTransactionsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hex":
			out.Hex = string(in.String())
		case "txid":
			out.Txid = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "size":
			out.Size = string(in.String())
		case "vsize":
			out.Vsize = string(in.String())
		case "weight":
			out.Weight = string(in.String())
		case "version":
			out.Version = int32(in.Int32())
		case "locktime":
			out.LockTime = uint32(in.Uint32())
		case "vin":
			if in.IsNull() {
				in.Skip()
				out.Vin = nil
			} else {
				in.Delim('[')
				if out.Vin == nil {
					if !in.IsDelim(']') {
						out.Vin = make([]VinPrevOut, 0, 0)
					} else {
						out.Vin = []VinPrevOut{}
					}
				} else {
					out.Vin = (out.Vin)[:0]
				}
				for !in.IsDelim(']') {
					var v24 VinPrevOut
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson12(in, &v24)
					out.Vin = append(out.Vin, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vout":
			if in.IsNull() {
				in.Skip()
				out.Vout = nil
			} else {
				in.Delim('[')
				if out.Vout == nil {
					if !in.IsDelim(']') {
						out.Vout = make([]Vout, 0, 0)
					} else {
						out.Vout = []Vout{}
					}
				} else {
					out.Vout = (out.Vout)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Vout
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson2(in, &v25)
					out.Vout = append(out.Vout, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blockhash":
			out.BlockHash = string(in.String())
		case "confirmations":
			out.Confirmations = uint64(in.Uint64())
		case "time":
			out.Time = int64(in.Int64())
		case "blocktime":
			out.Blocktime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson11(out *jwriter.Writer, in SearchRawTransactionsResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hex != "" {
		const prefix string = ",\"hex\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hex))
	}
	if in.Txid != "" {
		const prefix string = ",\"txid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txid))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.Size != "" {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Size))
	}
	if in.Vsize != "" {
		const prefix string = ",\"vsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Vsize))
	}
	if in.Weight != "" {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Weight))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.LockTime != 0 {
		const prefix string = ",\"locktime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.LockTime))
	}
	if len(in.Vin) != 0 {
		const prefix string = ",\"vin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Vin {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Raw((v27).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Vout) != 0 {
		const prefix string = ",\"vout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Vout {
				if v28 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson1(out, v29)
			}
			out.RawByte(']')
		}
	}
	if in.BlockHash != "" {
		const prefix string = ",\"blockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BlockHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Confirmations))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Blocktime != 0 {
		const prefix string = ",\"blocktime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Blocktime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchRawTransactionsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchRawTransactionsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchRawTransactionsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchRawTransactionsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson11(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson12(in *jlexer.Lexer, out *VinPrevOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coinbase":
			out.Coinbase = string(in.String())
		case "txid":
			out.Txid = string(in.String())
		case "vout":
			out.Vout = uint32(in.Uint32())
		case "scriptSig":
			if in.IsNull() {
				in.Skip()
				out.ScriptSig = nil
			} else {
				if out.ScriptSig == nil {
					out.ScriptSig = new(ScriptSig)
				}
				easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson4(in, out.ScriptSig)
			}
		case "txinwitness":
			if in.IsNull() {
				in.Skip()
				out.Witness = nil
			} else {
				in.Delim('[')
				if out.Witness == nil {
					if !in.IsDelim(']') {
						out.Witness = make([]string, 0, 4)
					} else {
						out.Witness = []string{}
					}
				} else {
					out.Witness = (out.Witness)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Witness = append(out.Witness, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prevOut":
			if in.IsNull() {
				in.Skip()
				out.PrevOut = nil
			} else {
				if out.PrevOut == nil {
					out.PrevOut = new(PrevOut)
				}
				easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson13(in, out.PrevOut)
			}
		case "sequence":
			out.Sequence = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson12(out *jwriter.Writer, in VinPrevOut) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Coinbase != "" {
		const prefix string = ",\"coinbase\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Coinbase))
	}
	if in.Txid != "" {
		const prefix string = ",\"txid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txid))
	}
	if in.Vout != 0 {
		const prefix string = ",\"vout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Vout))
	}
	if in.ScriptSig != nil {
		const prefix string = ",\"scriptSig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson4(out, *in.ScriptSig)
	}
	if len(in.Witness) != 0 {
		const prefix string = ",\"txinwitness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.Witness {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if in.PrevOut != nil {
		const prefix string = ",\"prevOut\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson13(out, *in.PrevOut)
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Sequence))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson13(in *jlexer.Lexer, out *PrevOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.Addresses = append(out.Addresses, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "value":
			out.Value = float64(in.Float64())
		case "precise_value":
			out.PreciseValue = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson13(out *jwriter.Writer, in PrevOut) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Addresses) != 0 {
		const prefix string = ",\"addresses\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v34, v35 := range in.Addresses {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	if in.PreciseValue != 0 {
		const prefix string = ",\"precise_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PreciseValue))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson14(in *jlexer.Lexer, out *MempoolUTXOs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MempoolUTXOs, 0, 1)
			} else {
				*out = MempoolUTXOs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v36 MempoolUTXO
			(v36).UnmarshalEasyJSON(in)
			*out = append(*out, v36)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson14(out *jwriter.Writer, in MempoolUTXOs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v37, v38 := range in {
			if v37 > 0 {
				out.RawByte(',')
			}
			(v38).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MempoolUTXOs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MempoolUTXOs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MempoolUTXOs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MempoolUTXOs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson14(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson15(in *jlexer.Lexer, out *MempoolUTXO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "utxoHash":
			out.UTXOHash = string(in.String())
		case "utxoIndex":
			out.UTXOIndex = uint32(in.Uint32())
		case "usedByTxHash":
			out.UsedByTxHash = string(in.String())
		case "usedByTxIndex":
			out.UsedByTxIndex = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson15(out *jwriter.Writer, in MempoolUTXO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UTXOHash != "" {
		const prefix string = ",\"utxoHash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UTXOHash))
	}
	if in.UTXOIndex != 0 {
		const prefix string = ",\"utxoIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.UTXOIndex))
	}
	if in.UsedByTxHash != "" {
		const prefix string = ",\"usedByTxHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UsedByTxHash))
	}
	if in.UsedByTxIndex != 0 {
		const prefix string = ",\"usedByTxIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.UsedByTxIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MempoolUTXO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MempoolUTXO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MempoolUTXO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MempoolUTXO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson15(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson16(in *jlexer.Lexer, out *ListTxOutResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "List":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]ExtendedTxOutResult, 0, 0)
					} else {
						out.List = []ExtendedTxOutResult{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v39 ExtendedTxOutResult
					(v39).UnmarshalEasyJSON(in)
					out.List = append(out.List, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson16(out *jwriter.Writer, in ListTxOutResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.List) != 0 {
		const prefix string = ",\"List\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v40, v41 := range in.List {
				if v40 > 0 {
					out.RawByte(',')
				}
				(v41).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListTxOutResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListTxOutResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListTxOutResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListTxOutResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson16(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson17(in *jlexer.Lexer, out *ListEADAddresses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agents":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Agents = make(map[string]EADAddresses)
				} else {
					out.Agents = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v42 EADAddresses
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson18(in, &v42)
					(out.Agents)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson17(out *jwriter.Writer, in ListEADAddresses) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Agents) != 0 {
		const prefix string = ",\"agents\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.Agents {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v43Name))
				out.RawByte(':')
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson18(out, v43Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListEADAddresses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListEADAddresses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListEADAddresses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListEADAddresses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson17(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson18(in *jlexer.Lexer, out *EADAddresses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "publicKey":
			out.PublicKey = string(in.String())
		case "ips":
			if in.IsNull() {
				in.Skip()
				out.IPs = nil
			} else {
				in.Delim('[')
				if out.IPs == nil {
					if !in.IsDelim(']') {
						out.IPs = make([]EADAddress, 0, 0)
					} else {
						out.IPs = []EADAddress{}
					}
				} else {
					out.IPs = (out.IPs)[:0]
				}
				for !in.IsDelim(']') {
					var v44 EADAddress
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson19(in, &v44)
					out.IPs = append(out.IPs, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson18(out *jwriter.Writer, in EADAddresses) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.PublicKey != "" {
		const prefix string = ",\"publicKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PublicKey))
	}
	if len(in.IPs) != 0 {
		const prefix string = ",\"ips\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.IPs {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson19(out, v46)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson19(in *jlexer.Lexer, out *EADAddress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		case "expires_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpiresAt).UnmarshalJSON(data))
			}
		case "shards":
			out.Shard = uint32(in.Uint32())
		case "tx_hash":
			out.TxHash = string(in.String())
		case "tx_out_index":
			out.TxOutIndex = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson19(out *jwriter.Writer, in EADAddress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Port))
	}
	if true {
		const prefix string = ",\"expires_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ExpiresAt).MarshalJSON())
	}
	if in.Shard != 0 {
		const prefix string = ",\"shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Shard))
	}
	if in.TxHash != "" {
		const prefix string = ",\"tx_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxHash))
	}
	if in.TxOutIndex != 0 {
		const prefix string = ",\"tx_out_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TxOutIndex))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson20(in *jlexer.Lexer, out *GetTxResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bestblock":
			out.BestBlock = string(in.String())
		case "block":
			out.Block = string(in.String())
		case "height":
			out.Height = int64(in.Int64())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "coinbase":
			out.Coinbase = bool(in.Bool())
		case "raw_tx":
			out.RawTx = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson20(out *jwriter.Writer, in GetTxResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BestBlock != "" {
		const prefix string = ",\"bestblock\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BestBlock))
	}
	if in.Block != "" {
		const prefix string = ",\"block\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Block))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.Coinbase {
		const prefix string = ",\"coinbase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Coinbase))
	}
	if in.RawTx != "" {
		const prefix string = ",\"raw_tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawTx))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetTxResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetTxResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetTxResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetTxResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson20(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson21(in *jlexer.Lexer, out *GetTxOutResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bestblock":
			out.BestBlock = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "value":
			out.Value = float64(in.Float64())
		case "scriptPubKey":
			easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson3(in, &out.ScriptPubKey)
		case "coinbase":
			out.Coinbase = bool(in.Bool())
		case "isSpent":
			out.IsSpent = bool(in.Bool())
		case "precise_value":
			out.PreciseValue = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson21(out *jwriter.Writer, in GetTxOutResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BestBlock != "" {
		const prefix string = ",\"bestblock\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BestBlock))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	if true {
		const prefix string = ",\"scriptPubKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson2(out, in.ScriptPubKey)
	}
	if in.Coinbase {
		const prefix string = ",\"coinbase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Coinbase))
	}
	if in.IsSpent {
		const prefix string = ",\"isSpent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsSpent))
	}
	if in.PreciseValue != 0 {
		const prefix string = ",\"precise_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PreciseValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetTxOutResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetTxOutResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetTxOutResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetTxOutResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson21(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson22(in *jlexer.Lexer, out *GetShardBlockVerboseTxResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "strippedsize":
			out.StrippedSize = int32(in.Int32())
		case "size":
			out.Size = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "height":
			out.Height = int64(in.Int64())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "tx":
			if in.IsNull() {
				in.Skip()
				out.Tx = nil
			} else {
				in.Delim('[')
				if out.Tx == nil {
					if !in.IsDelim(']') {
						out.Tx = make([]TxRawResult, 0, 0)
					} else {
						out.Tx = []TxRawResult{}
					}
				} else {
					out.Tx = (out.Tx)[:0]
				}
				for !in.IsDelim(']') {
					var v47 TxRawResult
					(v47).UnmarshalEasyJSON(in)
					out.Tx = append(out.Tx, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint32(in.Uint32())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "bcblock":
			(out.BCBlock).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson22(out *jwriter.Writer, in GetShardBlockVerboseTxResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.StrippedSize != 0 {
		const prefix string = ",\"strippedsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StrippedSize))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if len(in.Tx) != 0 {
		const prefix string = ",\"tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v48, v49 := range in.Tx {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Nonce))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if true {
		const prefix string = ",\"bcblock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BCBlock).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockVerboseTxResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockVerboseTxResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockVerboseTxResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockVerboseTxResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson22(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson23(in *jlexer.Lexer, out *GetShardBlockVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "shardhash":
			out.ShardHash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "strippedsize":
			out.StrippedSize = int32(in.Int32())
		case "size":
			out.Size = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "height":
			out.Height = int64(in.Int64())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "tx":
			if in.IsNull() {
				in.Skip()
				out.Tx = nil
			} else {
				in.Delim('[')
				if out.Tx == nil {
					if !in.IsDelim(']') {
						out.Tx = make([]string, 0, 4)
					} else {
						out.Tx = []string{}
					}
				} else {
					out.Tx = (out.Tx)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.Tx = append(out.Tx, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rawtx":
			if in.IsNull() {
				in.Skip()
				out.RawTx = nil
			} else {
				in.Delim('[')
				if out.RawTx == nil {
					if !in.IsDelim(']') {
						out.RawTx = make([]TxRawResult, 0, 0)
					} else {
						out.RawTx = []TxRawResult{}
					}
				} else {
					out.RawTx = (out.RawTx)[:0]
				}
				for !in.IsDelim(']') {
					var v51 TxRawResult
					(v51).UnmarshalEasyJSON(in)
					out.RawTx = append(out.RawTx, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = int64(in.Int64())
		case "bits":
			out.Bits = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "prevblocksmmrroot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "bcblock":
			(out.BCBlock).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson23(out *jwriter.Writer, in GetShardBlockVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	if in.ShardHash != "" {
		const prefix string = ",\"shardhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShardHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.StrippedSize != 0 {
		const prefix string = ",\"strippedsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StrippedSize))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if len(in.Tx) != 0 {
		const prefix string = ",\"tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.Tx {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	if len(in.RawTx) != 0 {
		const prefix string = ",\"rawtx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.RawTx {
				if v54 > 0 {
					out.RawByte(',')
				}
				(v55).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevblocksmmrroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if true {
		const prefix string = ",\"bcblock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BCBlock).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson23(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson24(in *jlexer.Lexer, out *GetShardBlockTemplateResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bits":
			out.Bits = string(in.String())
		case "chainweight":
			out.ChainWeight = string(in.String())
		case "curtime":
			out.CurTime = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "prevblocksmmrroot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "sigoplimit":
			out.SigOpLimit = int64(in.Int64())
		case "sizelimit":
			out.SizeLimit = int64(in.Int64())
		case "weightlimit":
			out.WeightLimit = int64(in.Int64())
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]GetBlockTemplateResultTx, 0, 0)
					} else {
						out.Transactions = []GetBlockTemplateResultTx{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v56 GetBlockTemplateResultTx
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson25(in, &v56)
					out.Transactions = append(out.Transactions, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = int32(in.Int32())
		case "coinbaseaux":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseAux = nil
			} else {
				if out.CoinbaseAux == nil {
					out.CoinbaseAux = new(GetBlockTemplateResultAux)
				}
				easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson26(in, out.CoinbaseAux)
			}
		case "coinbasetxn":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseTxn = nil
			} else {
				if out.CoinbaseTxn == nil {
					out.CoinbaseTxn = new(GetBlockTemplateResultTx)
				}
				easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson25(in, out.CoinbaseTxn)
			}
		case "coinbasevalue":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseValue = nil
			} else {
				if out.CoinbaseValue == nil {
					out.CoinbaseValue = new(int64)
				}
				*out.CoinbaseValue = int64(in.Int64())
			}
		case "workid":
			out.WorkID = string(in.String())
		case "default_witness_commitment":
			out.DefaultWitnessCommitment = string(in.String())
		case "longpollid":
			out.LongPollID = string(in.String())
		case "longpolluri":
			out.LongPollURI = string(in.String())
		case "submitold":
			if in.IsNull() {
				in.Skip()
				out.SubmitOld = nil
			} else {
				if out.SubmitOld == nil {
					out.SubmitOld = new(bool)
				}
				*out.SubmitOld = bool(in.Bool())
			}
		case "target":
			out.Target = string(in.String())
		case "expires":
			out.Expires = int64(in.Int64())
		case "maxtime":
			out.MaxTime = int64(in.Int64())
		case "mintime":
			out.MinTime = int64(in.Int64())
		case "mutable":
			if in.IsNull() {
				in.Skip()
				out.Mutable = nil
			} else {
				in.Delim('[')
				if out.Mutable == nil {
					if !in.IsDelim(']') {
						out.Mutable = make([]string, 0, 4)
					} else {
						out.Mutable = []string{}
					}
				} else {
					out.Mutable = (out.Mutable)[:0]
				}
				for !in.IsDelim(']') {
					var v57 string
					v57 = string(in.String())
					out.Mutable = append(out.Mutable, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "noncerange":
			out.NonceRange = string(in.String())
		case "capabilities":
			if in.IsNull() {
				in.Skip()
				out.Capabilities = nil
			} else {
				in.Delim('[')
				if out.Capabilities == nil {
					if !in.IsDelim(']') {
						out.Capabilities = make([]string, 0, 4)
					} else {
						out.Capabilities = []string{}
					}
				} else {
					out.Capabilities = (out.Capabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v58 string
					v58 = string(in.String())
					out.Capabilities = append(out.Capabilities, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reject-reason":
			out.RejectReason = string(in.String())
		case "btcAux":
			out.BTCAux = string(in.String())
		case "k":
			out.K = uint32(in.Uint32())
		case "vote_k":
			out.VoteK = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson24(out *jwriter.Writer, in GetShardBlockTemplateResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Bits))
	}
	if in.ChainWeight != "" {
		const prefix string = ",\"chainweight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChainWeight))
	}
	if in.CurTime != 0 {
		const prefix string = ",\"curtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CurTime))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevblocksmmrroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.SigOpLimit != 0 {
		const prefix string = ",\"sigoplimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SigOpLimit))
	}
	if in.SizeLimit != 0 {
		const prefix string = ",\"sizelimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SizeLimit))
	}
	if in.WeightLimit != 0 {
		const prefix string = ",\"weightlimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WeightLimit))
	}
	if len(in.Transactions) != 0 {
		const prefix string = ",\"transactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Transactions {
				if v59 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson25(out, v60)
			}
			out.RawByte(']')
		}
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.CoinbaseAux != nil {
		const prefix string = ",\"coinbaseaux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson26(out, *in.CoinbaseAux)
	}
	if in.CoinbaseTxn != nil {
		const prefix string = ",\"coinbasetxn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson25(out, *in.CoinbaseTxn)
	}
	if in.CoinbaseValue != nil {
		const prefix string = ",\"coinbasevalue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.CoinbaseValue))
	}
	if in.WorkID != "" {
		const prefix string = ",\"workid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkID))
	}
	if in.DefaultWitnessCommitment != "" {
		const prefix string = ",\"default_witness_commitment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultWitnessCommitment))
	}
	if in.LongPollID != "" {
		const prefix string = ",\"longpollid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LongPollID))
	}
	if in.LongPollURI != "" {
		const prefix string = ",\"longpolluri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LongPollURI))
	}
	if in.SubmitOld != nil {
		const prefix string = ",\"submitold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SubmitOld))
	}
	if in.Target != "" {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Target))
	}
	if in.Expires != 0 {
		const prefix string = ",\"expires\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Expires))
	}
	if in.MaxTime != 0 {
		const prefix string = ",\"maxtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxTime))
	}
	if in.MinTime != 0 {
		const prefix string = ",\"mintime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinTime))
	}
	if len(in.Mutable) != 0 {
		const prefix string = ",\"mutable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v61, v62 := range in.Mutable {
				if v61 > 0 {
					out.RawByte(',')
				}
				out.String(string(v62))
			}
			out.RawByte(']')
		}
	}
	if in.NonceRange != "" {
		const prefix string = ",\"noncerange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NonceRange))
	}
	if len(in.Capabilities) != 0 {
		const prefix string = ",\"capabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v63, v64 := range in.Capabilities {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.String(string(v64))
			}
			out.RawByte(']')
		}
	}
	if in.RejectReason != "" {
		const prefix string = ",\"reject-reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectReason))
	}
	if in.BTCAux != "" {
		const prefix string = ",\"btcAux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BTCAux))
	}
	if in.K != 0 {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.K))
	}
	if in.VoteK != 0 {
		const prefix string = ",\"vote_k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.VoteK))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockTemplateResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockTemplateResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockTemplateResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockTemplateResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson24(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson26(in *jlexer.Lexer, out *GetBlockTemplateResultAux) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "flags":
			out.Flags = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson26(out *jwriter.Writer, in GetBlockTemplateResultAux) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Flags != "" {
		const prefix string = ",\"flags\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Flags))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson25(in *jlexer.Lexer, out *GetBlockTemplateResultTx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "depends":
			if in.IsNull() {
				in.Skip()
				out.Depends = nil
			} else {
				in.Delim('[')
				if out.Depends == nil {
					if !in.IsDelim(']') {
						out.Depends = make([]int64, 0, 8)
					} else {
						out.Depends = []int64{}
					}
				} else {
					out.Depends = (out.Depends)[:0]
				}
				for !in.IsDelim(']') {
					var v65 int64
					v65 = int64(in.Int64())
					out.Depends = append(out.Depends, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fee":
			out.Fee = int64(in.Int64())
		case "sigops":
			out.SigOps = int64(in.Int64())
		case "weight":
			out.Weight = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson25(out *jwriter.Writer, in GetBlockTemplateResultTx) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Data != "" {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if len(in.Depends) != 0 {
		const prefix string = ",\"depends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v66, v67 := range in.Depends {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v67))
			}
			out.RawByte(']')
		}
	}
	if in.Fee != 0 {
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Fee))
	}
	if in.SigOps != 0 {
		const prefix string = ",\"sigops\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SigOps))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Weight))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson27(in *jlexer.Lexer, out *GetShardBlockResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetShardBlockResults, 0, 1)
			} else {
				*out = GetShardBlockResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v68 GetBeaconBlockResult
			(v68).UnmarshalEasyJSON(in)
			*out = append(*out, v68)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson27(out *jwriter.Writer, in GetShardBlockResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v69, v70 := range in {
			if v69 > 0 {
				out.RawByte(',')
			}
			(v70).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson27(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson28(in *jlexer.Lexer, out *GetShardBlockResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block":
			out.Block = string(in.String())
		case "height":
			out.Height = int32(in.Int32())
		case "serial_id":
			out.SerialID = int64(in.Int64())
		case "prev_serial_id":
			out.PrevSerialID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson28(out *jwriter.Writer, in GetShardBlockResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Block != "" {
		const prefix string = ",\"block\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Block))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serial_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prev_serial_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson28(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson29(in *jlexer.Lexer, out *GetShardBlockHeaderVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "shardhash":
			out.ShardHash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "height":
			out.Height = int32(in.Int32())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "bits":
			out.Bits = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "prevblocksmmrroot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "bcheader":
			(out.BCHeader).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson29(out *jwriter.Writer, in GetShardBlockHeaderVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	if in.ShardHash != "" {
		const prefix string = ",\"shardhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShardHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevblocksmmrroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if true {
		const prefix string = ",\"bcheader\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BCHeader).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockHeaderVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockHeaderVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockHeaderVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockHeaderVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson29(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson30(in *jlexer.Lexer, out *GetRawMempoolVerboseResultMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(GetRawMempoolVerboseResultMap)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v71 GetRawMempoolVerboseResult
			(v71).UnmarshalEasyJSON(in)
			(*out)[key] = v71
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson30(out *jwriter.Writer, in GetRawMempoolVerboseResultMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v72First := true
		for v72Name, v72Value := range in {
			if v72First {
				v72First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v72Name))
			out.RawByte(':')
			(v72Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetRawMempoolVerboseResultMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetRawMempoolVerboseResultMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetRawMempoolVerboseResultMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetRawMempoolVerboseResultMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson30(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson31(in *jlexer.Lexer, out *GetRawMempoolVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int32(in.Int32())
		case "vsize":
			out.Vsize = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "fee":
			out.Fee = float64(in.Float64())
		case "time":
			out.Time = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "startingpriority":
			out.StartingPriority = float64(in.Float64())
		case "currentpriority":
			out.CurrentPriority = float64(in.Float64())
		case "depends":
			if in.IsNull() {
				in.Skip()
				out.Depends = nil
			} else {
				in.Delim('[')
				if out.Depends == nil {
					if !in.IsDelim(']') {
						out.Depends = make([]string, 0, 4)
					} else {
						out.Depends = []string{}
					}
				} else {
					out.Depends = (out.Depends)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.Depends = append(out.Depends, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "precise_fee":
			out.PreciseFee = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson31(out *jwriter.Writer, in GetRawMempoolVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Size))
	}
	if in.Vsize != 0 {
		const prefix string = ",\"vsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Vsize))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if in.Fee != 0 {
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Fee))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.StartingPriority != 0 {
		const prefix string = ",\"startingpriority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.StartingPriority))
	}
	if in.CurrentPriority != 0 {
		const prefix string = ",\"currentpriority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.CurrentPriority))
	}
	if len(in.Depends) != 0 {
		const prefix string = ",\"depends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.Depends {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	if in.PreciseFee != 0 {
		const prefix string = ",\"precise_fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PreciseFee))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetRawMempoolVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetRawMempoolVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetRawMempoolVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetRawMempoolVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson31(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson32(in *jlexer.Lexer, out *GetPeerInfoResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetPeerInfoResults, 0, 0)
			} else {
				*out = GetPeerInfoResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v76 GetPeerInfoResult
			(v76).UnmarshalEasyJSON(in)
			*out = append(*out, v76)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson32(out *jwriter.Writer, in GetPeerInfoResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v77, v78 := range in {
			if v77 > 0 {
				out.RawByte(',')
			}
			(v78).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetPeerInfoResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPeerInfoResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPeerInfoResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPeerInfoResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson32(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson33(in *jlexer.Lexer, out *GetPeerInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "addr":
			out.Addr = string(in.String())
		case "addrlocal":
			out.AddrLocal = string(in.String())
		case "services":
			out.Services = string(in.String())
		case "relaytxes":
			out.RelayTxes = bool(in.Bool())
		case "lastsend":
			out.LastSend = int64(in.Int64())
		case "lastrecv":
			out.LastRecv = int64(in.Int64())
		case "bytessent":
			out.BytesSent = uint64(in.Uint64())
		case "bytesrecv":
			out.BytesRecv = uint64(in.Uint64())
		case "conntime":
			out.ConnTime = int64(in.Int64())
		case "timeoffset":
			out.TimeOffset = int64(in.Int64())
		case "pingtime":
			out.PingTime = float64(in.Float64())
		case "pingwait":
			out.PingWait = float64(in.Float64())
		case "version":
			out.Version = uint32(in.Uint32())
		case "subver":
			out.SubVer = string(in.String())
		case "inbound":
			out.Inbound = bool(in.Bool())
		case "startingheight":
			out.StartingHeight = int32(in.Int32())
		case "currentheight":
			out.CurrentHeight = int32(in.Int32())
		case "banscore":
			out.BanScore = int32(in.Int32())
		case "feefilter":
			out.FeeFilter = int64(in.Int64())
		case "syncnode":
			out.SyncNode = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson33(out *jwriter.Writer, in GetPeerInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	if in.Addr != "" {
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	if in.AddrLocal != "" {
		const prefix string = ",\"addrlocal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrLocal))
	}
	if in.Services != "" {
		const prefix string = ",\"services\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Services))
	}
	if in.RelayTxes {
		const prefix string = ",\"relaytxes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RelayTxes))
	}
	if in.LastSend != 0 {
		const prefix string = ",\"lastsend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastSend))
	}
	if in.LastRecv != 0 {
		const prefix string = ",\"lastrecv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastRecv))
	}
	if in.BytesSent != 0 {
		const prefix string = ",\"bytessent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BytesSent))
	}
	if in.BytesRecv != 0 {
		const prefix string = ",\"bytesrecv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BytesRecv))
	}
	if in.ConnTime != 0 {
		const prefix string = ",\"conntime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ConnTime))
	}
	if in.TimeOffset != 0 {
		const prefix string = ",\"timeoffset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TimeOffset))
	}
	if in.PingTime != 0 {
		const prefix string = ",\"pingtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.PingTime))
	}
	if in.PingWait != 0 {
		const prefix string = ",\"pingwait\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.PingWait))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Version))
	}
	if in.SubVer != "" {
		const prefix string = ",\"subver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubVer))
	}
	if in.Inbound {
		const prefix string = ",\"inbound\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Inbound))
	}
	if in.StartingHeight != 0 {
		const prefix string = ",\"startingheight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StartingHeight))
	}
	if in.CurrentHeight != 0 {
		const prefix string = ",\"currentheight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.CurrentHeight))
	}
	if in.BanScore != 0 {
		const prefix string = ",\"banscore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BanScore))
	}
	if in.FeeFilter != 0 {
		const prefix string = ",\"feefilter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FeeFilter))
	}
	if in.SyncNode {
		const prefix string = ",\"syncnode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SyncNode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPeerInfoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPeerInfoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPeerInfoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPeerInfoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson33(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson34(in *jlexer.Lexer, out *GetNodeMetricsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stats":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Stats = make(map[string]float64)
				} else {
					out.Stats = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v79 float64
					v79 = float64(in.Float64())
					(out.Stats)[key] = v79
					in.WantComma()
				}
				in.Delim('}')
			}
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson34(out *jwriter.Writer, in GetNodeMetricsResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Stats) != 0 {
		const prefix string = ",\"stats\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v80First := true
			for v80Name, v80Value := range in.Stats {
				if v80First {
					v80First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v80Name))
				out.RawByte(':')
				out.Float64(float64(v80Value))
			}
			out.RawByte('}')
		}
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetNodeMetricsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetNodeMetricsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetNodeMetricsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetNodeMetricsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson34(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson35(in *jlexer.Lexer, out *GetNetworkInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int32(in.Int32())
		case "subversion":
			out.SubVersion = string(in.String())
		case "protocolversion":
			out.ProtocolVersion = int32(in.Int32())
		case "localservices":
			out.LocalServices = string(in.String())
		case "localrelay":
			out.LocalRelay = bool(in.Bool())
		case "timeoffset":
			out.TimeOffset = int64(in.Int64())
		case "connections":
			out.Connections = int32(in.Int32())
		case "networkactive":
			out.NetworkActive = bool(in.Bool())
		case "networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]NetworksResult, 0, 1)
					} else {
						out.Networks = []NetworksResult{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v81 NetworksResult
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson36(in, &v81)
					out.Networks = append(out.Networks, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "relayfee":
			out.RelayFee = float64(in.Float64())
		case "incrementalfee":
			out.IncrementalFee = float64(in.Float64())
		case "localaddresses":
			if in.IsNull() {
				in.Skip()
				out.LocalAddresses = nil
			} else {
				in.Delim('[')
				if out.LocalAddresses == nil {
					if !in.IsDelim(']') {
						out.LocalAddresses = make([]LocalAddressesResult, 0, 2)
					} else {
						out.LocalAddresses = []LocalAddressesResult{}
					}
				} else {
					out.LocalAddresses = (out.LocalAddresses)[:0]
				}
				for !in.IsDelim(']') {
					var v82 LocalAddressesResult
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson37(in, &v82)
					out.LocalAddresses = append(out.LocalAddresses, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "warnings":
			out.Warnings = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson35(out *jwriter.Writer, in GetNetworkInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Version))
	}
	if in.SubVersion != "" {
		const prefix string = ",\"subversion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubVersion))
	}
	if in.ProtocolVersion != 0 {
		const prefix string = ",\"protocolversion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ProtocolVersion))
	}
	if in.LocalServices != "" {
		const prefix string = ",\"localservices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalServices))
	}
	if in.LocalRelay {
		const prefix string = ",\"localrelay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.LocalRelay))
	}
	if in.TimeOffset != 0 {
		const prefix string = ",\"timeoffset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TimeOffset))
	}
	if in.Connections != 0 {
		const prefix string = ",\"connections\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Connections))
	}
	if in.NetworkActive {
		const prefix string = ",\"networkactive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NetworkActive))
	}
	if len(in.Networks) != 0 {
		const prefix string = ",\"networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v83, v84 := range in.Networks {
				if v83 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson36(out, v84)
			}
			out.RawByte(']')
		}
	}
	if in.RelayFee != 0 {
		const prefix string = ",\"relayfee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.RelayFee))
	}
	if in.IncrementalFee != 0 {
		const prefix string = ",\"incrementalfee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.IncrementalFee))
	}
	if len(in.LocalAddresses) != 0 {
		const prefix string = ",\"localaddresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v85, v86 := range in.LocalAddresses {
				if v85 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson37(out, v86)
			}
			out.RawByte(']')
		}
	}
	if in.Warnings != "" {
		const prefix string = ",\"warnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Warnings))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetNetworkInfoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetNetworkInfoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetNetworkInfoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetNetworkInfoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson35(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson37(in *jlexer.Lexer, out *LocalAddressesResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		case "score":
			out.Score = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson37(out *jwriter.Writer, in LocalAddressesResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Port))
	}
	if in.Score != 0 {
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Score))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson36(in *jlexer.Lexer, out *NetworksResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "limited":
			out.Limited = bool(in.Bool())
		case "reachable":
			out.Reachable = bool(in.Bool())
		case "proxy":
			out.Proxy = string(in.String())
		case "proxy_randomize_credentials":
			out.ProxyRandomizeCredentials = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson36(out *jwriter.Writer, in NetworksResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Limited {
		const prefix string = ",\"limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Limited))
	}
	if in.Reachable {
		const prefix string = ",\"reachable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Reachable))
	}
	if in.Proxy != "" {
		const prefix string = ",\"proxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Proxy))
	}
	if in.ProxyRandomizeCredentials {
		const prefix string = ",\"proxy_randomize_credentials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ProxyRandomizeCredentials))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson38(in *jlexer.Lexer, out *GetMiningInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blocks":
			out.Blocks = int64(in.Int64())
		case "currentblocksize":
			out.CurrentBlockSize = uint64(in.Uint64())
		case "currentblockweight":
			out.CurrentBlockWeight = uint64(in.Uint64())
		case "currentblocktx":
			out.CurrentBlockTx = uint64(in.Uint64())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "errors":
			out.Errors = string(in.String())
		case "networkhashps":
			out.NetworkHashPS = int64(in.Int64())
		case "pooledtx":
			out.PooledTx = uint64(in.Uint64())
		case "testnet":
			out.TestNet = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson38(out *jwriter.Writer, in GetMiningInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Blocks != 0 {
		const prefix string = ",\"blocks\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Blocks))
	}
	if in.CurrentBlockSize != 0 {
		const prefix string = ",\"currentblocksize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CurrentBlockSize))
	}
	if in.CurrentBlockWeight != 0 {
		const prefix string = ",\"currentblockweight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CurrentBlockWeight))
	}
	if in.CurrentBlockTx != 0 {
		const prefix string = ",\"currentblocktx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CurrentBlockTx))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.Errors != "" {
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Errors))
	}
	if in.NetworkHashPS != 0 {
		const prefix string = ",\"networkhashps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NetworkHashPS))
	}
	if in.PooledTx != 0 {
		const prefix string = ",\"pooledtx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PooledTx))
	}
	if in.TestNet {
		const prefix string = ",\"testnet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TestNet))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMiningInfoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMiningInfoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMiningInfoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMiningInfoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson38(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson39(in *jlexer.Lexer, out *GetMempoolEntryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vsize":
			out.VSize = int32(in.Int32())
		case "size":
			out.Size = int32(in.Int32())
		case "weight":
			out.Weight = int64(in.Int64())
		case "fee":
			out.Fee = float64(in.Float64())
		case "modifiedfee":
			out.ModifiedFee = float64(in.Float64())
		case "time":
			out.Time = int64(in.Int64())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "descendantcount":
			out.DescendantCount = int64(in.Int64())
		case "descendantsize":
			out.DescendantSize = int64(in.Int64())
		case "descendantfees":
			out.DescendantFees = float64(in.Float64())
		case "ancestorcount":
			out.AncestorCount = int64(in.Int64())
		case "ancestorsize":
			out.AncestorSize = int64(in.Int64())
		case "ancestorfees":
			out.AncestorFees = float64(in.Float64())
		case "wtxid":
			out.WTxID = string(in.String())
		case "fees":
			easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson40(in, &out.Fees)
		case "depends":
			if in.IsNull() {
				in.Skip()
				out.Depends = nil
			} else {
				in.Delim('[')
				if out.Depends == nil {
					if !in.IsDelim(']') {
						out.Depends = make([]string, 0, 4)
					} else {
						out.Depends = []string{}
					}
				} else {
					out.Depends = (out.Depends)[:0]
				}
				for !in.IsDelim(']') {
					var v87 string
					v87 = string(in.String())
					out.Depends = append(out.Depends, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson39(out *jwriter.Writer, in GetMempoolEntryResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VSize != 0 {
		const prefix string = ",\"vsize\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.VSize))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Weight))
	}
	if in.Fee != 0 {
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Fee))
	}
	if in.ModifiedFee != 0 {
		const prefix string = ",\"modifiedfee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ModifiedFee))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.DescendantCount != 0 {
		const prefix string = ",\"descendantcount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DescendantCount))
	}
	if in.DescendantSize != 0 {
		const prefix string = ",\"descendantsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DescendantSize))
	}
	if in.DescendantFees != 0 {
		const prefix string = ",\"descendantfees\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.DescendantFees))
	}
	if in.AncestorCount != 0 {
		const prefix string = ",\"ancestorcount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AncestorCount))
	}
	if in.AncestorSize != 0 {
		const prefix string = ",\"ancestorsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AncestorSize))
	}
	if in.AncestorFees != 0 {
		const prefix string = ",\"ancestorfees\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AncestorFees))
	}
	if in.WTxID != "" {
		const prefix string = ",\"wtxid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WTxID))
	}
	if true {
		const prefix string = ",\"fees\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson40(out, in.Fees)
	}
	if len(in.Depends) != 0 {
		const prefix string = ",\"depends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v88, v89 := range in.Depends {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.String(string(v89))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMempoolEntryResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMempoolEntryResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMempoolEntryResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMempoolEntryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson39(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson40(in *jlexer.Lexer, out *MempoolFees) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base":
			out.Base = float64(in.Float64())
		case "modified":
			out.Modified = float64(in.Float64())
		case "ancestor":
			out.Ancestor = float64(in.Float64())
		case "descendant":
			out.Descendant = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson40(out *jwriter.Writer, in MempoolFees) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Base != 0 {
		const prefix string = ",\"base\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Base))
	}
	if in.Modified != 0 {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Modified))
	}
	if in.Ancestor != 0 {
		const prefix string = ",\"ancestor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Ancestor))
	}
	if in.Descendant != 0 {
		const prefix string = ",\"descendant\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Descendant))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson41(in *jlexer.Lexer, out *GetChainStatsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "txcount":
			out.Txs = int64(in.Int64())
		case "txrate":
			out.Txrate = string(in.String())
		case "window_final_block_hash":
			out.WindowFinalBlockHash = string(in.String())
		case "window_final_block_height":
			out.WindowFinalBlockHeight = int64(in.Int64())
		case "window_block_count":
			out.WindowBlockCount = int64(in.Int64())
		case "window_tx_count":
			out.WindowTxCount = int64(in.Int64())
		case "window_interval":
			out.WindowInterval = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson41(out *jwriter.Writer, in GetChainStatsResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Time))
	}
	if in.Txs != 0 {
		const prefix string = ",\"txcount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Txs))
	}
	if in.Txrate != "" {
		const prefix string = ",\"txrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txrate))
	}
	if in.WindowFinalBlockHash != "" {
		const prefix string = ",\"window_final_block_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WindowFinalBlockHash))
	}
	if in.WindowFinalBlockHeight != 0 {
		const prefix string = ",\"window_final_block_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WindowFinalBlockHeight))
	}
	if in.WindowBlockCount != 0 {
		const prefix string = ",\"window_block_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WindowBlockCount))
	}
	if in.WindowTxCount != 0 {
		const prefix string = ",\"window_tx_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WindowTxCount))
	}
	if in.WindowInterval != 0 {
		const prefix string = ",\"window_interval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WindowInterval))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChainStatsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChainStatsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChainStatsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChainStatsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson41(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson42(in *jlexer.Lexer, out *GetChainMetricsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chainStats":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ChainStats = make(map[uint32]map[string]float64)
				} else {
					out.ChainStats = nil
				}
				for !in.IsDelim('}') {
					key := uint32(in.Uint32Str())
					in.WantColon()
					var v90 map[string]float64
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v90 = make(map[string]float64)
						} else {
							v90 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v91 float64
							v91 = float64(in.Float64())
							(v90)[key] = v91
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.ChainStats)[key] = v90
					in.WantComma()
				}
				in.Delim('}')
			}
		case "netName":
			out.NetName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson42(out *jwriter.Writer, in GetChainMetricsResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ChainStats) != 0 {
		const prefix string = ",\"chainStats\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v92First := true
			for v92Name, v92Value := range in.ChainStats {
				if v92First {
					v92First = false
				} else {
					out.RawByte(',')
				}
				out.Uint32Str(uint32(v92Name))
				out.RawByte(':')
				if v92Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v93First := true
					for v93Name, v93Value := range v92Value {
						if v93First {
							v93First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v93Name))
						out.RawByte(':')
						out.Float64(float64(v93Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	if in.NetName != "" {
		const prefix string = ",\"netName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChainMetricsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChainMetricsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChainMetricsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChainMetricsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson42(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson43(in *jlexer.Lexer, out *GetBlockStatsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avgfee":
			out.AverageFee = int64(in.Int64())
		case "avgfeerate":
			out.AverageFeeRate = int64(in.Int64())
		case "avgtxsize":
			out.AverageTxSize = int64(in.Int64())
		case "feerate_percentiles":
			if in.IsNull() {
				in.Skip()
				out.FeeratePercentiles = nil
			} else {
				in.Delim('[')
				if out.FeeratePercentiles == nil {
					if !in.IsDelim(']') {
						out.FeeratePercentiles = make([]int64, 0, 8)
					} else {
						out.FeeratePercentiles = []int64{}
					}
				} else {
					out.FeeratePercentiles = (out.FeeratePercentiles)[:0]
				}
				for !in.IsDelim(']') {
					var v94 int64
					v94 = int64(in.Int64())
					out.FeeratePercentiles = append(out.FeeratePercentiles, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blockhash":
			out.Hash = string(in.String())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "ins":
			out.Ins = int64(in.Int64())
		case "maxfee":
			out.MaxFee = int64(in.Int64())
		case "maxfeerate":
			out.MaxFeeRate = int64(in.Int64())
		case "maxtxsize":
			out.MaxTxSize = int64(in.Int64())
		case "medianfee":
			out.MedianFee = int64(in.Int64())
		case "mediantime":
			out.MedianTime = int64(in.Int64())
		case "mediantxsize":
			out.MedianTxSize = int64(in.Int64())
		case "minfee":
			out.MinFee = int64(in.Int64())
		case "minfeerate":
			out.MinFeeRate = int64(in.Int64())
		case "mintxsize":
			out.MinTxSize = int64(in.Int64())
		case "outs":
			out.Outs = int64(in.Int64())
		case "swtotal_size":
			out.SegWitTotalSize = int64(in.Int64())
		case "swtotal_weight":
			out.SegWitTotalWeight = int64(in.Int64())
		case "swtxs":
			out.SegWitTxs = int64(in.Int64())
		case "subsidy":
			out.Subsidy = int64(in.Int64())
		case "time":
			out.Time = int64(in.Int64())
		case "total_out":
			out.TotalOut = int64(in.Int64())
		case "total_size":
			out.TotalSize = int64(in.Int64())
		case "total_weight":
			out.TotalWeight = int64(in.Int64())
		case "txs":
			out.Txs = int64(in.Int64())
		case "utxo_increase":
			out.UTXOIncrease = int64(in.Int64())
		case "utxo_size_inc":
			out.UTXOSizeIncrease = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson43(out *jwriter.Writer, in GetBlockStatsResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AverageFee != 0 {
		const prefix string = ",\"avgfee\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.AverageFee))
	}
	if in.AverageFeeRate != 0 {
		const prefix string = ",\"avgfeerate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AverageFeeRate))
	}
	if in.AverageTxSize != 0 {
		const prefix string = ",\"avgtxsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AverageTxSize))
	}
	if len(in.FeeratePercentiles) != 0 {
		const prefix string = ",\"feerate_percentiles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v95, v96 := range in.FeeratePercentiles {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v96))
			}
			out.RawByte(']')
		}
	}
	if in.Hash != "" {
		const prefix string = ",\"blockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.Ins != 0 {
		const prefix string = ",\"ins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ins))
	}
	if in.MaxFee != 0 {
		const prefix string = ",\"maxfee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxFee))
	}
	if in.MaxFeeRate != 0 {
		const prefix string = ",\"maxfeerate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxFeeRate))
	}
	if in.MaxTxSize != 0 {
		const prefix string = ",\"maxtxsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxTxSize))
	}
	if in.MedianFee != 0 {
		const prefix string = ",\"medianfee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MedianFee))
	}
	if in.MedianTime != 0 {
		const prefix string = ",\"mediantime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MedianTime))
	}
	if in.MedianTxSize != 0 {
		const prefix string = ",\"mediantxsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MedianTxSize))
	}
	if in.MinFee != 0 {
		const prefix string = ",\"minfee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinFee))
	}
	if in.MinFeeRate != 0 {
		const prefix string = ",\"minfeerate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinFeeRate))
	}
	if in.MinTxSize != 0 {
		const prefix string = ",\"mintxsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinTxSize))
	}
	if in.Outs != 0 {
		const prefix string = ",\"outs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Outs))
	}
	if in.SegWitTotalSize != 0 {
		const prefix string = ",\"swtotal_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SegWitTotalSize))
	}
	if in.SegWitTotalWeight != 0 {
		const prefix string = ",\"swtotal_weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SegWitTotalWeight))
	}
	if in.SegWitTxs != 0 {
		const prefix string = ",\"swtxs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SegWitTxs))
	}
	if in.Subsidy != 0 {
		const prefix string = ",\"subsidy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Subsidy))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.TotalOut != 0 {
		const prefix string = ",\"total_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalOut))
	}
	if in.TotalSize != 0 {
		const prefix string = ",\"total_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalSize))
	}
	if in.TotalWeight != 0 {
		const prefix string = ",\"total_weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalWeight))
	}
	if in.Txs != 0 {
		const prefix string = ",\"txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Txs))
	}
	if in.UTXOIncrease != 0 {
		const prefix string = ",\"utxo_increase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UTXOIncrease))
	}
	if in.UTXOSizeIncrease != 0 {
		const prefix string = ",\"utxo_size_inc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UTXOSizeIncrease))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBlockStatsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBlockStatsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBlockStatsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBlockStatsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson43(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson44(in *jlexer.Lexer, out *GetBeaconBlockVerboseTxResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "strippedsize":
			out.StrippedSize = int32(in.Int32())
		case "size":
			out.Size = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "tx":
			if in.IsNull() {
				in.Skip()
				out.Tx = nil
			} else {
				in.Delim('[')
				if out.Tx == nil {
					if !in.IsDelim(']') {
						out.Tx = make([]TxRawResult, 0, 0)
					} else {
						out.Tx = []TxRawResult{}
					}
				} else {
					out.Tx = (out.Tx)[:0]
				}
				for !in.IsDelim(']') {
					var v97 TxRawResult
					(v97).UnmarshalEasyJSON(in)
					out.Tx = append(out.Tx, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint32(in.Uint32())
		case "bits":
			out.Bits = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "nextblockhash":
			out.NextHash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson44(out *jwriter.Writer, in GetBeaconBlockVerboseTxResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.StrippedSize != 0 {
		const prefix string = ",\"strippedsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StrippedSize))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if len(in.Tx) != 0 {
		const prefix string = ",\"tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.Tx {
				if v98 > 0 {
					out.RawByte(',')
				}
				(v99).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Nonce))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockVerboseTxResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockVerboseTxResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockVerboseTxResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockVerboseTxResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson44(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson45(in *jlexer.Lexer, out *GetBeaconBlockVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "strippedsize":
			out.StrippedSize = int32(in.Int32())
		case "size":
			out.Size = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "height":
			out.Height = int64(in.Int64())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "tx":
			if in.IsNull() {
				in.Skip()
				out.Tx = nil
			} else {
				in.Delim('[')
				if out.Tx == nil {
					if !in.IsDelim(']') {
						out.Tx = make([]string, 0, 4)
					} else {
						out.Tx = []string{}
					}
				} else {
					out.Tx = (out.Tx)[:0]
				}
				for !in.IsDelim(']') {
					var v100 string
					v100 = string(in.String())
					out.Tx = append(out.Tx, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rawtx":
			if in.IsNull() {
				in.Skip()
				out.RawTx = nil
			} else {
				in.Delim('[')
				if out.RawTx == nil {
					if !in.IsDelim(']') {
						out.RawTx = make([]TxRawResult, 0, 0)
					} else {
						out.RawTx = []TxRawResult{}
					}
				} else {
					out.RawTx = (out.RawTx)[:0]
				}
				for !in.IsDelim(']') {
					var v101 TxRawResult
					(v101).UnmarshalEasyJSON(in)
					out.RawTx = append(out.RawTx, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint32(in.Uint32())
		case "bits":
			out.Bits = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "powhash":
			out.PoWHash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "blocksmmrroot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "mmr":
			out.MerkleMountainRange = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson45(out *jwriter.Writer, in GetBeaconBlockVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.StrippedSize != 0 {
		const prefix string = ",\"strippedsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StrippedSize))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if len(in.Tx) != 0 {
		const prefix string = ",\"tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v102, v103 := range in.Tx {
				if v102 > 0 {
					out.RawByte(',')
				}
				out.String(string(v103))
			}
			out.RawByte(']')
		}
	}
	if len(in.RawTx) != 0 {
		const prefix string = ",\"rawtx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v104, v105 := range in.RawTx {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Nonce))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.PoWHash != "" {
		const prefix string = ",\"powhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PoWHash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"blocksmmrroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if in.MerkleMountainRange != "" {
		const prefix string = ",\"mmr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleMountainRange))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson45(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson46(in *jlexer.Lexer, out *GetBeaconBlockTemplateResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bits":
			out.Bits = string(in.String())
		case "chainweight":
			out.ChainWeight = string(in.String())
		case "curtime":
			out.CurTime = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "prevblocksmmrroot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "sigoplimit":
			out.SigOpLimit = int64(in.Int64())
		case "sizelimit":
			out.SizeLimit = int64(in.Int64())
		case "weightlimit":
			out.WeightLimit = int64(in.Int64())
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]GetBlockTemplateResultTx, 0, 0)
					} else {
						out.Transactions = []GetBlockTemplateResultTx{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v106 GetBlockTemplateResultTx
					easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson25(in, &v106)
					out.Transactions = append(out.Transactions, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = int32(in.Int32())
		case "shards":
			out.Shards = uint32(in.Uint32())
		case "coinbaseaux":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseAux = nil
			} else {
				if out.CoinbaseAux == nil {
					out.CoinbaseAux = new(GetBlockTemplateResultAux)
				}
				easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson26(in, out.CoinbaseAux)
			}
		case "coinbasetxn":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseTxn = nil
			} else {
				if out.CoinbaseTxn == nil {
					out.CoinbaseTxn = new(GetBlockTemplateResultTx)
				}
				easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson25(in, out.CoinbaseTxn)
			}
		case "coinbasevalue":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseValue = nil
			} else {
				if out.CoinbaseValue == nil {
					out.CoinbaseValue = new(int64)
				}
				*out.CoinbaseValue = int64(in.Int64())
			}
		case "workid":
			out.WorkID = string(in.String())
		case "default_witness_commitment":
			out.DefaultWitnessCommitment = string(in.String())
		case "longpollid":
			out.LongPollID = string(in.String())
		case "longpolluri":
			out.LongPollURI = string(in.String())
		case "submitold":
			if in.IsNull() {
				in.Skip()
				out.SubmitOld = nil
			} else {
				if out.SubmitOld == nil {
					out.SubmitOld = new(bool)
				}
				*out.SubmitOld = bool(in.Bool())
			}
		case "target":
			out.Target = string(in.String())
		case "expires":
			out.Expires = int64(in.Int64())
		case "maxtime":
			out.MaxTime = int64(in.Int64())
		case "mintime":
			out.MinTime = int64(in.Int64())
		case "mutable":
			if in.IsNull() {
				in.Skip()
				out.Mutable = nil
			} else {
				in.Delim('[')
				if out.Mutable == nil {
					if !in.IsDelim(']') {
						out.Mutable = make([]string, 0, 4)
					} else {
						out.Mutable = []string{}
					}
				} else {
					out.Mutable = (out.Mutable)[:0]
				}
				for !in.IsDelim(']') {
					var v107 string
					v107 = string(in.String())
					out.Mutable = append(out.Mutable, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "noncerange":
			out.NonceRange = string(in.String())
		case "capabilities":
			if in.IsNull() {
				in.Skip()
				out.Capabilities = nil
			} else {
				in.Delim('[')
				if out.Capabilities == nil {
					if !in.IsDelim(']') {
						out.Capabilities = make([]string, 0, 4)
					} else {
						out.Capabilities = []string{}
					}
				} else {
					out.Capabilities = (out.Capabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v108 string
					v108 = string(in.String())
					out.Capabilities = append(out.Capabilities, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reject-reason":
			out.RejectReason = string(in.String())
		case "btcAux":
			out.BTCAux = string(in.String())
		case "k":
			out.K = uint32(in.Uint32())
		case "vote_k":
			out.VoteK = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson46(out *jwriter.Writer, in GetBeaconBlockTemplateResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Bits))
	}
	if in.ChainWeight != "" {
		const prefix string = ",\"chainweight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChainWeight))
	}
	if in.CurTime != 0 {
		const prefix string = ",\"curtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CurTime))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevblocksmmrroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.SigOpLimit != 0 {
		const prefix string = ",\"sigoplimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SigOpLimit))
	}
	if in.SizeLimit != 0 {
		const prefix string = ",\"sizelimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SizeLimit))
	}
	if in.WeightLimit != 0 {
		const prefix string = ",\"weightlimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WeightLimit))
	}
	if len(in.Transactions) != 0 {
		const prefix string = ",\"transactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v109, v110 := range in.Transactions {
				if v109 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson25(out, v110)
			}
			out.RawByte(']')
		}
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.Shards != 0 {
		const prefix string = ",\"shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Shards))
	}
	if in.CoinbaseAux != nil {
		const prefix string = ",\"coinbaseaux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson26(out, *in.CoinbaseAux)
	}
	if in.CoinbaseTxn != nil {
		const prefix string = ",\"coinbasetxn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson25(out, *in.CoinbaseTxn)
	}
	if in.CoinbaseValue != nil {
		const prefix string = ",\"coinbasevalue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.CoinbaseValue))
	}
	if in.WorkID != "" {
		const prefix string = ",\"workid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkID))
	}
	if in.DefaultWitnessCommitment != "" {
		const prefix string = ",\"default_witness_commitment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultWitnessCommitment))
	}
	if in.LongPollID != "" {
		const prefix string = ",\"longpollid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LongPollID))
	}
	if in.LongPollURI != "" {
		const prefix string = ",\"longpolluri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LongPollURI))
	}
	if in.SubmitOld != nil {
		const prefix string = ",\"submitold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SubmitOld))
	}
	if in.Target != "" {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Target))
	}
	if in.Expires != 0 {
		const prefix string = ",\"expires\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Expires))
	}
	if in.MaxTime != 0 {
		const prefix string = ",\"maxtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxTime))
	}
	if in.MinTime != 0 {
		const prefix string = ",\"mintime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinTime))
	}
	if len(in.Mutable) != 0 {
		const prefix string = ",\"mutable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v111, v112 := range in.Mutable {
				if v111 > 0 {
					out.RawByte(',')
				}
				out.String(string(v112))
			}
			out.RawByte(']')
		}
	}
	if in.NonceRange != "" {
		const prefix string = ",\"noncerange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NonceRange))
	}
	if len(in.Capabilities) != 0 {
		const prefix string = ",\"capabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.Capabilities {
				if v113 > 0 {
					out.RawByte(',')
				}
				out.String(string(v114))
			}
			out.RawByte(']')
		}
	}
	if in.RejectReason != "" {
		const prefix string = ",\"reject-reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectReason))
	}
	if in.BTCAux != "" {
		const prefix string = ",\"btcAux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BTCAux))
	}
	if in.K != 0 {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.K))
	}
	if in.VoteK != 0 {
		const prefix string = ",\"vote_k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.VoteK))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockTemplateResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockTemplateResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockTemplateResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockTemplateResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson46(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson47(in *jlexer.Lexer, out *GetBeaconBlockResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetBeaconBlockResults, 0, 1)
			} else {
				*out = GetBeaconBlockResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v115 GetBeaconBlockResult
			(v115).UnmarshalEasyJSON(in)
			*out = append(*out, v115)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson47(out *jwriter.Writer, in GetBeaconBlockResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v116, v117 := range in {
			if v116 > 0 {
				out.RawByte(',')
			}
			(v117).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson47(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson48(in *jlexer.Lexer, out *GetBeaconBlockResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block":
			out.Block = string(in.String())
		case "height":
			out.Height = int32(in.Int32())
		case "serial_id":
			out.SerialID = int64(in.Int64())
		case "prev_serial_id":
			out.PrevSerialID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson48(out *jwriter.Writer, in GetBeaconBlockResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Block != "" {
		const prefix string = ",\"block\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Block))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serial_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prev_serial_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson48(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson49(in *jlexer.Lexer, out *GetBeaconBlockHeaderVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "height":
			out.Height = int32(in.Int32())
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "mmr":
			out.MerkleMountainRange = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint64(in.Uint64())
		case "bits":
			out.Bits = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "prevblocksmmrroot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "nextblockhash":
			out.NextHash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson49(out *jwriter.Writer, in GetBeaconBlockHeaderVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Height))
	}
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.MerkleMountainRange != "" {
		const prefix string = ",\"mmr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleMountainRange))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Nonce))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevblocksmmrroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockHeaderVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockHeaderVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockHeaderVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockHeaderVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson49(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson50(in *jlexer.Lexer, out *GetAddedNodeInfoResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetAddedNodeInfoResults, 0, 2)
			} else {
				*out = GetAddedNodeInfoResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v118 GetAddedNodeInfoResult
			(v118).UnmarshalEasyJSON(in)
			*out = append(*out, v118)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson50(out *jwriter.Writer, in GetAddedNodeInfoResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v119, v120 := range in {
			if v119 > 0 {
				out.RawByte(',')
			}
			(v120).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetAddedNodeInfoResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAddedNodeInfoResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAddedNodeInfoResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAddedNodeInfoResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson50(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson51(in *jlexer.Lexer, out *GetAddedNodeInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addednode":
			out.AddedNode = string(in.String())
		case "connected":
			if in.IsNull() {
				in.Skip()
				out.Connected = nil
			} else {
				if out.Connected == nil {
					out.Connected = new(bool)
				}
				*out.Connected = bool(in.Bool())
			}
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				if out.Addresses == nil {
					out.Addresses = new([]GetAddedNodeInfoResultAddr)
				}
				if in.IsNull() {
					in.Skip()
					*out.Addresses = nil
				} else {
					in.Delim('[')
					if *out.Addresses == nil {
						if !in.IsDelim(']') {
							*out.Addresses = make([]GetAddedNodeInfoResultAddr, 0, 2)
						} else {
							*out.Addresses = []GetAddedNodeInfoResultAddr{}
						}
					} else {
						*out.Addresses = (*out.Addresses)[:0]
					}
					for !in.IsDelim(']') {
						var v121 GetAddedNodeInfoResultAddr
						easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson52(in, &v121)
						*out.Addresses = append(*out.Addresses, v121)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson51(out *jwriter.Writer, in GetAddedNodeInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AddedNode != "" {
		const prefix string = ",\"addednode\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AddedNode))
	}
	if in.Connected != nil {
		const prefix string = ",\"connected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Connected))
	}
	if in.Addresses != nil {
		const prefix string = ",\"addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v122, v123 := range *in.Addresses {
				if v122 > 0 {
					out.RawByte(',')
				}
				easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson52(out, v123)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAddedNodeInfoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAddedNodeInfoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAddedNodeInfoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAddedNodeInfoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson51(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson52(in *jlexer.Lexer, out *GetAddedNodeInfoResultAddr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "connected":
			out.Connected = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson52(out *jwriter.Writer, in GetAddedNodeInfoResultAddr) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	if in.Connected != "" {
		const prefix string = ",\"connected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Connected))
	}
	out.RawByte('}')
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson53(in *jlexer.Lexer, out *Fee) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coins_per_kb":
			out.CoinsPerKB = float64(in.Float64())
		case "satoshi_per_b":
			out.SatoshiPerB = float64(in.Float64())
		case "blocks":
			out.Blocks = int64(in.Int64())
		case "estimated":
			out.Estimated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson53(out *jwriter.Writer, in Fee) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CoinsPerKB != 0 {
		const prefix string = ",\"coins_per_kb\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.CoinsPerKB))
	}
	if in.SatoshiPerB != 0 {
		const prefix string = ",\"satoshi_per_b\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SatoshiPerB))
	}
	if in.Blocks != 0 {
		const prefix string = ",\"blocks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Blocks))
	}
	if in.Estimated {
		const prefix string = ",\"estimated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Estimated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fee) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fee) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fee) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fee) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson53(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson54(in *jlexer.Lexer, out *ExtendedTxOutResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txHash":
			out.TxHash = string(in.String())
		case "index":
			out.Index = uint32(in.Uint32())
		case "blockHeight":
			out.BlockHeight = int64(in.Int64())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "value":
			out.Value = int64(in.Int64())
		case "scriptPubKey":
			easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson3(in, &out.ScriptPubKey)
		case "coinbase":
			out.Coinbase = bool(in.Bool())
		case "used":
			out.Used = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson54(out *jwriter.Writer, in ExtendedTxOutResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.TxHash))
	}
	if in.Index != 0 {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Index))
	}
	if in.BlockHeight != 0 {
		const prefix string = ",\"blockHeight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BlockHeight))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Value))
	}
	if true {
		const prefix string = ",\"scriptPubKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson2(out, in.ScriptPubKey)
	}
	if in.Coinbase {
		const prefix string = ",\"coinbase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Coinbase))
	}
	if in.Used {
		const prefix string = ",\"used\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Used))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendedTxOutResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendedTxOutResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendedTxOutResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendedTxOutResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson54(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson55(in *jlexer.Lexer, out *ExtendedFeeFeeResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fast":
			(out.Fast).UnmarshalEasyJSON(in)
		case "moderate":
			(out.Moderate).UnmarshalEasyJSON(in)
		case "slow":
			(out.Slow).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson55(out *jwriter.Writer, in ExtendedFeeFeeResult) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"fast\":"
		first = false
		out.RawString(prefix[1:])
		(in.Fast).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"moderate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Moderate).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"slow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Slow).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendedFeeFeeResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendedFeeFeeResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendedFeeFeeResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendedFeeFeeResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson55(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson56(in *jlexer.Lexer, out *EstimateSmartFeeResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "btc_per_kb":
			if in.IsNull() {
				in.Skip()
				out.BtcPerKB = nil
			} else {
				if out.BtcPerKB == nil {
					out.BtcPerKB = new(float64)
				}
				*out.BtcPerKB = float64(in.Float64())
			}
		case "satoshi_per_b":
			if in.IsNull() {
				in.Skip()
				out.SatoshiPerB = nil
			} else {
				if out.SatoshiPerB == nil {
					out.SatoshiPerB = new(float64)
				}
				*out.SatoshiPerB = float64(in.Float64())
			}
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]string, 0, 4)
					} else {
						out.Errors = []string{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v124 string
					v124 = string(in.String())
					out.Errors = append(out.Errors, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blocks":
			out.Blocks = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson56(out *jwriter.Writer, in EstimateSmartFeeResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BtcPerKB != nil {
		const prefix string = ",\"btc_per_kb\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(*in.BtcPerKB))
	}
	if in.SatoshiPerB != nil {
		const prefix string = ",\"satoshi_per_b\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.SatoshiPerB))
	}
	if len(in.Errors) != 0 {
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v125, v126 := range in.Errors {
				if v125 > 0 {
					out.RawByte(',')
				}
				out.String(string(v126))
			}
			out.RawByte(']')
		}
	}
	if in.Blocks != 0 {
		const prefix string = ",\"blocks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Blocks))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EstimateSmartFeeResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EstimateSmartFeeResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EstimateSmartFeeResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EstimateSmartFeeResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson56(l, v)
}
func easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson57(in *jlexer.Lexer, out *BlockTxOperations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blockHash":
			out.BlockHash = string(in.String())
		case "blockHeight":
			out.BlockHeight = int64(in.Int64())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "ops":
			if in.IsNull() {
				in.Skip()
				out.Ops = nil
			} else {
				in.Delim('[')
				if out.Ops == nil {
					if !in.IsDelim(']') {
						out.Ops = make([]TxOperation, 0, 0)
					} else {
						out.Ops = []TxOperation{}
					}
				} else {
					out.Ops = (out.Ops)[:0]
				}
				for !in.IsDelim(']') {
					var v127 TxOperation
					(v127).UnmarshalEasyJSON(in)
					out.Ops = append(out.Ops, v127)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson57(out *jwriter.Writer, in BlockTxOperations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BlockHash != "" {
		const prefix string = ",\"blockHash\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BlockHash))
	}
	if in.BlockHeight != 0 {
		const prefix string = ",\"blockHeight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BlockHeight))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if len(in.Ops) != 0 {
		const prefix string = ",\"ops\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v128, v129 := range in.Ops {
				if v128 > 0 {
					out.RawByte(',')
				}
				(v129).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockTxOperations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockTxOperations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c474aeaEncodeGitlabComJaxnetJaxnetdTypesJaxjson57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockTxOperations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockTxOperations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c474aeaDecodeGitlabComJaxnetJaxnetdTypesJaxjson57(l, v)
}
