// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jaxjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson(in *jlexer.Lexer, out *ShardBlockHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "height":
			out.Height = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "powhash":
			out.PoWHash = string(in.String())
		case "exclusiveHash":
			out.ExclusiveHash = string(in.String())
		case "prevBlocksMmrRoot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "actualBlocksMmrRoot":
			out.ActualBlocksMMRRoot = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "shardMerkleProof":
			if in.IsNull() {
				in.Skip()
				out.ShardMerkleProof = nil
			} else {
				in.Delim('[')
				if out.ShardMerkleProof == nil {
					if !in.IsDelim(']') {
						out.ShardMerkleProof = make([]string, 0, 4)
					} else {
						out.ShardMerkleProof = []string{}
					}
				} else {
					out.ShardMerkleProof = (out.ShardMerkleProof)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ShardMerkleProof = append(out.ShardMerkleProof, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "beaconAuxHeader":
			(out.BeaconAuxHeader).UnmarshalEasyJSON(in)
		case "beaconCoinbaseTx":
			if in.IsNull() {
				in.Skip()
				out.BeaconCoinbaseTx = nil
			} else {
				if out.BeaconCoinbaseTx == nil {
					out.BeaconCoinbaseTx = new(TxRawResult)
				}
				(*out.BeaconCoinbaseTx).UnmarshalEasyJSON(in)
			}
		case "beaconCoinbaseTxHex":
			out.BeaconCoinbaseTxHex = string(in.String())
		case "beaconCoinbaseMerkleProof":
			if in.IsNull() {
				in.Skip()
				out.BeaconCoinbaseMerkleProof = nil
			} else {
				in.Delim('[')
				if out.BeaconCoinbaseMerkleProof == nil {
					if !in.IsDelim(']') {
						out.BeaconCoinbaseMerkleProof = make([]string, 0, 4)
					} else {
						out.BeaconCoinbaseMerkleProof = []string{}
					}
				} else {
					out.BeaconCoinbaseMerkleProof = (out.BeaconCoinbaseMerkleProof)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.BeaconCoinbaseMerkleProof = append(out.BeaconCoinbaseMerkleProof, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson(out *jwriter.Writer, in ShardBlockHeader) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PoWHash != "" {
		const prefix string = ",\"powhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PoWHash))
	}
	if in.ExclusiveHash != "" {
		const prefix string = ",\"exclusiveHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExclusiveHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.ActualBlocksMMRRoot != "" {
		const prefix string = ",\"actualBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActualBlocksMMRRoot))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if len(in.ShardMerkleProof) != 0 {
		const prefix string = ",\"shardMerkleProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.ShardMerkleProof {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"beaconAuxHeader\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BeaconAuxHeader).MarshalEasyJSON(out)
	}
	if in.BeaconCoinbaseTx != nil {
		const prefix string = ",\"beaconCoinbaseTx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BeaconCoinbaseTx).MarshalEasyJSON(out)
	}
	if in.BeaconCoinbaseTxHex != "" {
		const prefix string = ",\"beaconCoinbaseTxHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BeaconCoinbaseTxHex))
	}
	if len(in.BeaconCoinbaseMerkleProof) != 0 {
		const prefix string = ",\"beaconCoinbaseMerkleProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.BeaconCoinbaseMerkleProof {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShardBlockHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShardBlockHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShardBlockHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShardBlockHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson(l, v)
}
func easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson1(in *jlexer.Lexer, out *GetShardBlockVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "strippedsize":
			out.StrippedSize = int32(in.Int32())
		case "size":
			out.Size = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "txHashes":
			if in.IsNull() {
				in.Skip()
				out.TxHashes = nil
			} else {
				in.Delim('[')
				if out.TxHashes == nil {
					if !in.IsDelim(']') {
						out.TxHashes = make([]string, 0, 4)
					} else {
						out.TxHashes = []string{}
					}
				} else {
					out.TxHashes = (out.TxHashes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.TxHashes = append(out.TxHashes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tx":
			if in.IsNull() {
				in.Skip()
				out.Tx = nil
			} else {
				in.Delim('[')
				if out.Tx == nil {
					if !in.IsDelim(']') {
						out.Tx = make([]TxRawResult, 0, 0)
					} else {
						out.Tx = []TxRawResult{}
					}
				} else {
					out.Tx = (out.Tx)[:0]
				}
				for !in.IsDelim(']') {
					var v8 TxRawResult
					(v8).UnmarshalEasyJSON(in)
					out.Tx = append(out.Tx, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "height":
			out.Height = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "powhash":
			out.PoWHash = string(in.String())
		case "exclusiveHash":
			out.ExclusiveHash = string(in.String())
		case "prevBlocksMmrRoot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "actualBlocksMmrRoot":
			out.ActualBlocksMMRRoot = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "shardMerkleProof":
			if in.IsNull() {
				in.Skip()
				out.ShardMerkleProof = nil
			} else {
				in.Delim('[')
				if out.ShardMerkleProof == nil {
					if !in.IsDelim(']') {
						out.ShardMerkleProof = make([]string, 0, 4)
					} else {
						out.ShardMerkleProof = []string{}
					}
				} else {
					out.ShardMerkleProof = (out.ShardMerkleProof)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.ShardMerkleProof = append(out.ShardMerkleProof, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "beaconAuxHeader":
			(out.BeaconAuxHeader).UnmarshalEasyJSON(in)
		case "beaconCoinbaseTx":
			if in.IsNull() {
				in.Skip()
				out.BeaconCoinbaseTx = nil
			} else {
				if out.BeaconCoinbaseTx == nil {
					out.BeaconCoinbaseTx = new(TxRawResult)
				}
				(*out.BeaconCoinbaseTx).UnmarshalEasyJSON(in)
			}
		case "beaconCoinbaseTxHex":
			out.BeaconCoinbaseTxHex = string(in.String())
		case "beaconCoinbaseMerkleProof":
			if in.IsNull() {
				in.Skip()
				out.BeaconCoinbaseMerkleProof = nil
			} else {
				in.Delim('[')
				if out.BeaconCoinbaseMerkleProof == nil {
					if !in.IsDelim(']') {
						out.BeaconCoinbaseMerkleProof = make([]string, 0, 4)
					} else {
						out.BeaconCoinbaseMerkleProof = []string{}
					}
				} else {
					out.BeaconCoinbaseMerkleProof = (out.BeaconCoinbaseMerkleProof)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.BeaconCoinbaseMerkleProof = append(out.BeaconCoinbaseMerkleProof, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson1(out *jwriter.Writer, in GetShardBlockVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.StrippedSize != 0 {
		const prefix string = ",\"strippedsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StrippedSize))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if len(in.TxHashes) != 0 {
		const prefix string = ",\"txHashes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.TxHashes {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tx) != 0 {
		const prefix string = ",\"tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Tx {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PoWHash != "" {
		const prefix string = ",\"powhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PoWHash))
	}
	if in.ExclusiveHash != "" {
		const prefix string = ",\"exclusiveHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExclusiveHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.ActualBlocksMMRRoot != "" {
		const prefix string = ",\"actualBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActualBlocksMMRRoot))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if len(in.ShardMerkleProof) != 0 {
		const prefix string = ",\"shardMerkleProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.ShardMerkleProof {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"beaconAuxHeader\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BeaconAuxHeader).MarshalEasyJSON(out)
	}
	if in.BeaconCoinbaseTx != nil {
		const prefix string = ",\"beaconCoinbaseTx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BeaconCoinbaseTx).MarshalEasyJSON(out)
	}
	if in.BeaconCoinbaseTxHex != "" {
		const prefix string = ",\"beaconCoinbaseTxHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BeaconCoinbaseTxHex))
	}
	if len(in.BeaconCoinbaseMerkleProof) != 0 {
		const prefix string = ",\"beaconCoinbaseMerkleProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.BeaconCoinbaseMerkleProof {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson1(l, v)
}
func easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson2(in *jlexer.Lexer, out *GetShardBlockHeaderVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "height":
			out.Height = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "powhash":
			out.PoWHash = string(in.String())
		case "exclusiveHash":
			out.ExclusiveHash = string(in.String())
		case "prevBlocksMmrRoot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "actualBlocksMmrRoot":
			out.ActualBlocksMMRRoot = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "shardMerkleProof":
			if in.IsNull() {
				in.Skip()
				out.ShardMerkleProof = nil
			} else {
				in.Delim('[')
				if out.ShardMerkleProof == nil {
					if !in.IsDelim(']') {
						out.ShardMerkleProof = make([]string, 0, 4)
					} else {
						out.ShardMerkleProof = []string{}
					}
				} else {
					out.ShardMerkleProof = (out.ShardMerkleProof)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.ShardMerkleProof = append(out.ShardMerkleProof, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "beaconAuxHeader":
			(out.BeaconAuxHeader).UnmarshalEasyJSON(in)
		case "beaconCoinbaseTx":
			if in.IsNull() {
				in.Skip()
				out.BeaconCoinbaseTx = nil
			} else {
				if out.BeaconCoinbaseTx == nil {
					out.BeaconCoinbaseTx = new(TxRawResult)
				}
				(*out.BeaconCoinbaseTx).UnmarshalEasyJSON(in)
			}
		case "beaconCoinbaseTxHex":
			out.BeaconCoinbaseTxHex = string(in.String())
		case "beaconCoinbaseMerkleProof":
			if in.IsNull() {
				in.Skip()
				out.BeaconCoinbaseMerkleProof = nil
			} else {
				in.Delim('[')
				if out.BeaconCoinbaseMerkleProof == nil {
					if !in.IsDelim(']') {
						out.BeaconCoinbaseMerkleProof = make([]string, 0, 4)
					} else {
						out.BeaconCoinbaseMerkleProof = []string{}
					}
				} else {
					out.BeaconCoinbaseMerkleProof = (out.BeaconCoinbaseMerkleProof)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.BeaconCoinbaseMerkleProof = append(out.BeaconCoinbaseMerkleProof, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson2(out *jwriter.Writer, in GetShardBlockHeaderVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PoWHash != "" {
		const prefix string = ",\"powhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PoWHash))
	}
	if in.ExclusiveHash != "" {
		const prefix string = ",\"exclusiveHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExclusiveHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.ActualBlocksMMRRoot != "" {
		const prefix string = ",\"actualBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActualBlocksMMRRoot))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if len(in.ShardMerkleProof) != 0 {
		const prefix string = ",\"shardMerkleProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.ShardMerkleProof {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"beaconAuxHeader\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BeaconAuxHeader).MarshalEasyJSON(out)
	}
	if in.BeaconCoinbaseTx != nil {
		const prefix string = ",\"beaconCoinbaseTx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BeaconCoinbaseTx).MarshalEasyJSON(out)
	}
	if in.BeaconCoinbaseTxHex != "" {
		const prefix string = ",\"beaconCoinbaseTxHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BeaconCoinbaseTxHex))
	}
	if len(in.BeaconCoinbaseMerkleProof) != 0 {
		const prefix string = ",\"beaconCoinbaseMerkleProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.BeaconCoinbaseMerkleProof {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetShardBlockHeaderVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetShardBlockHeaderVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetShardBlockHeaderVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetShardBlockHeaderVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson2(l, v)
}
func easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson3(in *jlexer.Lexer, out *GetBeaconBlockVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "strippedsize":
			out.StrippedSize = int32(in.Int32())
		case "size":
			out.Size = int32(in.Int32())
		case "weight":
			out.Weight = int32(in.Int32())
		case "txHashes":
			if in.IsNull() {
				in.Skip()
				out.TxHashes = nil
			} else {
				in.Delim('[')
				if out.TxHashes == nil {
					if !in.IsDelim(']') {
						out.TxHashes = make([]string, 0, 4)
					} else {
						out.TxHashes = []string{}
					}
				} else {
					out.TxHashes = (out.TxHashes)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.TxHashes = append(out.TxHashes, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tx":
			if in.IsNull() {
				in.Skip()
				out.Tx = nil
			} else {
				in.Delim('[')
				if out.Tx == nil {
					if !in.IsDelim(']') {
						out.Tx = make([]TxRawResult, 0, 0)
					} else {
						out.Tx = []TxRawResult{}
					}
				} else {
					out.Tx = (out.Tx)[:0]
				}
				for !in.IsDelim(']') {
					var v26 TxRawResult
					(v26).UnmarshalEasyJSON(in)
					out.Tx = append(out.Tx, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "height":
			out.Height = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "powhash":
			out.PoWHash = string(in.String())
		case "exclusiveHash":
			out.ExclusiveHash = string(in.String())
		case "prevBlocksMmrRoot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "actualBlocksMmrRoot":
			out.ActualBlocksMMRRoot = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint32(in.Uint32())
		case "shards":
			out.Shards = uint32(in.Uint32())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "mergeMiningRoot":
			out.MergeMiningRoot = string(in.String())
		case "mergeMiningNumber":
			out.MergeMiningNumber = uint32(in.Uint32())
		case "treeEncoding":
			out.TreeEncoding = string(in.String())
		case "mergeMiningProof":
			if in.IsNull() {
				in.Skip()
				out.MergeMiningProof = nil
			} else {
				in.Delim('[')
				if out.MergeMiningProof == nil {
					if !in.IsDelim(']') {
						out.MergeMiningProof = make([]string, 0, 4)
					} else {
						out.MergeMiningProof = []string{}
					}
				} else {
					out.MergeMiningProof = (out.MergeMiningProof)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.MergeMiningProof = append(out.MergeMiningProof, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "treeCodingLengthBits":
			out.TreeCodingLengthBits = uint32(in.Uint32())
		case "btcAux":
			(out.BTCAux).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson3(out *jwriter.Writer, in GetBeaconBlockVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.StrippedSize != 0 {
		const prefix string = ",\"strippedsize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StrippedSize))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Size))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Weight))
	}
	if len(in.TxHashes) != 0 {
		const prefix string = ",\"txHashes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.TxHashes {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tx) != 0 {
		const prefix string = ",\"tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Tx {
				if v30 > 0 {
					out.RawByte(',')
				}
				(v31).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PoWHash != "" {
		const prefix string = ",\"powhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PoWHash))
	}
	if in.ExclusiveHash != "" {
		const prefix string = ",\"exclusiveHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExclusiveHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.ActualBlocksMMRRoot != "" {
		const prefix string = ",\"actualBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActualBlocksMMRRoot))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Nonce))
	}
	if in.Shards != 0 {
		const prefix string = ",\"shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Shards))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.MergeMiningRoot != "" {
		const prefix string = ",\"mergeMiningRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MergeMiningRoot))
	}
	if in.MergeMiningNumber != 0 {
		const prefix string = ",\"mergeMiningNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MergeMiningNumber))
	}
	if in.TreeEncoding != "" {
		const prefix string = ",\"treeEncoding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TreeEncoding))
	}
	if len(in.MergeMiningProof) != 0 {
		const prefix string = ",\"mergeMiningProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.MergeMiningProof {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.TreeCodingLengthBits != 0 {
		const prefix string = ",\"treeCodingLengthBits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TreeCodingLengthBits))
	}
	if true {
		const prefix string = ",\"btcAux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BTCAux).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson3(l, v)
}
func easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson4(in *jlexer.Lexer, out *GetBeaconBlockHeaderVerboseResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serialID":
			out.SerialID = int64(in.Int64())
		case "prevSerialID":
			out.PrevSerialID = int64(in.Int64())
		case "nextblockhash":
			out.NextHash = string(in.String())
		case "confirmations":
			out.Confirmations = int64(in.Int64())
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "height":
			out.Height = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "powhash":
			out.PoWHash = string(in.String())
		case "exclusiveHash":
			out.ExclusiveHash = string(in.String())
		case "prevBlocksMmrRoot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "actualBlocksMmrRoot":
			out.ActualBlocksMMRRoot = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint32(in.Uint32())
		case "shards":
			out.Shards = uint32(in.Uint32())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "mergeMiningRoot":
			out.MergeMiningRoot = string(in.String())
		case "mergeMiningNumber":
			out.MergeMiningNumber = uint32(in.Uint32())
		case "treeEncoding":
			out.TreeEncoding = string(in.String())
		case "mergeMiningProof":
			if in.IsNull() {
				in.Skip()
				out.MergeMiningProof = nil
			} else {
				in.Delim('[')
				if out.MergeMiningProof == nil {
					if !in.IsDelim(']') {
						out.MergeMiningProof = make([]string, 0, 4)
					} else {
						out.MergeMiningProof = []string{}
					}
				} else {
					out.MergeMiningProof = (out.MergeMiningProof)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.MergeMiningProof = append(out.MergeMiningProof, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "treeCodingLengthBits":
			out.TreeCodingLengthBits = uint32(in.Uint32())
		case "btcAux":
			(out.BTCAux).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson4(out *jwriter.Writer, in GetBeaconBlockHeaderVerboseResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SerialID != 0 {
		const prefix string = ",\"serialID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.SerialID))
	}
	if in.PrevSerialID != 0 {
		const prefix string = ",\"prevSerialID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrevSerialID))
	}
	if in.NextHash != "" {
		const prefix string = ",\"nextblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NextHash))
	}
	if in.Confirmations != 0 {
		const prefix string = ",\"confirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Confirmations))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PoWHash != "" {
		const prefix string = ",\"powhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PoWHash))
	}
	if in.ExclusiveHash != "" {
		const prefix string = ",\"exclusiveHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExclusiveHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.ActualBlocksMMRRoot != "" {
		const prefix string = ",\"actualBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActualBlocksMMRRoot))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Nonce))
	}
	if in.Shards != 0 {
		const prefix string = ",\"shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Shards))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.MergeMiningRoot != "" {
		const prefix string = ",\"mergeMiningRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MergeMiningRoot))
	}
	if in.MergeMiningNumber != 0 {
		const prefix string = ",\"mergeMiningNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MergeMiningNumber))
	}
	if in.TreeEncoding != "" {
		const prefix string = ",\"treeEncoding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TreeEncoding))
	}
	if len(in.MergeMiningProof) != 0 {
		const prefix string = ",\"mergeMiningProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.MergeMiningProof {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.TreeCodingLengthBits != 0 {
		const prefix string = ",\"treeCodingLengthBits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TreeCodingLengthBits))
	}
	if true {
		const prefix string = ",\"btcAux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BTCAux).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBeaconBlockHeaderVerboseResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBeaconBlockHeaderVerboseResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBeaconBlockHeaderVerboseResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBeaconBlockHeaderVerboseResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson4(l, v)
}
func easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson5(in *jlexer.Lexer, out *BeaconBlockHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "height":
			out.Height = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "powhash":
			out.PoWHash = string(in.String())
		case "exclusiveHash":
			out.ExclusiveHash = string(in.String())
		case "prevBlocksMmrRoot":
			out.PrevBlocksMMRRoot = string(in.String())
		case "actualBlocksMmrRoot":
			out.ActualBlocksMMRRoot = string(in.String())
		case "k":
			out.K = string(in.String())
		case "voteK":
			out.VoteK = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint32(in.Uint32())
		case "shards":
			out.Shards = uint32(in.Uint32())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "mergeMiningRoot":
			out.MergeMiningRoot = string(in.String())
		case "mergeMiningNumber":
			out.MergeMiningNumber = uint32(in.Uint32())
		case "treeEncoding":
			out.TreeEncoding = string(in.String())
		case "mergeMiningProof":
			if in.IsNull() {
				in.Skip()
				out.MergeMiningProof = nil
			} else {
				in.Delim('[')
				if out.MergeMiningProof == nil {
					if !in.IsDelim(']') {
						out.MergeMiningProof = make([]string, 0, 4)
					} else {
						out.MergeMiningProof = []string{}
					}
				} else {
					out.MergeMiningProof = (out.MergeMiningProof)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.MergeMiningProof = append(out.MergeMiningProof, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "treeCodingLengthBits":
			out.TreeCodingLengthBits = uint32(in.Uint32())
		case "btcAux":
			(out.BTCAux).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson5(out *jwriter.Writer, in BeaconBlockHeader) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Height))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.PoWHash != "" {
		const prefix string = ",\"powhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PoWHash))
	}
	if in.ExclusiveHash != "" {
		const prefix string = ",\"exclusiveHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExclusiveHash))
	}
	if in.PrevBlocksMMRRoot != "" {
		const prefix string = ",\"prevBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlocksMMRRoot))
	}
	if in.ActualBlocksMMRRoot != "" {
		const prefix string = ",\"actualBlocksMmrRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActualBlocksMMRRoot))
	}
	if in.K != "" {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K))
	}
	if in.VoteK != "" {
		const prefix string = ",\"voteK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VoteK))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Nonce))
	}
	if in.Shards != 0 {
		const prefix string = ",\"shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Shards))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.MergeMiningRoot != "" {
		const prefix string = ",\"mergeMiningRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MergeMiningRoot))
	}
	if in.MergeMiningNumber != 0 {
		const prefix string = ",\"mergeMiningNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MergeMiningNumber))
	}
	if in.TreeEncoding != "" {
		const prefix string = ",\"treeEncoding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TreeEncoding))
	}
	if len(in.MergeMiningProof) != 0 {
		const prefix string = ",\"mergeMiningProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.MergeMiningProof {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if in.TreeCodingLengthBits != 0 {
		const prefix string = ",\"treeCodingLengthBits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TreeCodingLengthBits))
	}
	if true {
		const prefix string = ",\"btcAux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BTCAux).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BeaconBlockHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BeaconBlockHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BeaconBlockHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BeaconBlockHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson5(l, v)
}
func easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson6(in *jlexer.Lexer, out *BTCBlockAux) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int32(in.Int32())
		case "versionHex":
			out.VersionHex = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "previousblockhash":
			out.PreviousHash = string(in.String())
		case "merkleroot":
			out.MerkleRoot = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "nonce":
			out.Nonce = uint32(in.Uint32())
		case "bits":
			out.Bits = string(in.String())
		case "difficulty":
			out.Difficulty = float64(in.Float64())
		case "coinbaseTx":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseTx = nil
			} else {
				if out.CoinbaseTx == nil {
					out.CoinbaseTx = new(TxRawResult)
				}
				(*out.CoinbaseTx).UnmarshalEasyJSON(in)
			}
		case "coinbaseTxHex":
			out.CoinbaseTxHex = string(in.String())
		case "coinbaseMerkleProof":
			if in.IsNull() {
				in.Skip()
				out.CoinbaseMerkleProof = nil
			} else {
				in.Delim('[')
				if out.CoinbaseMerkleProof == nil {
					if !in.IsDelim(']') {
						out.CoinbaseMerkleProof = make([]string, 0, 4)
					} else {
						out.CoinbaseMerkleProof = []string{}
					}
				} else {
					out.CoinbaseMerkleProof = (out.CoinbaseMerkleProof)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.CoinbaseMerkleProof = append(out.CoinbaseMerkleProof, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson6(out *jwriter.Writer, in BTCBlockAux) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Version))
	}
	if in.VersionHex != "" {
		const prefix string = ",\"versionHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionHex))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.PreviousHash != "" {
		const prefix string = ",\"previousblockhash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreviousHash))
	}
	if in.MerkleRoot != "" {
		const prefix string = ",\"merkleroot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerkleRoot))
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Nonce))
	}
	if in.Bits != "" {
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bits))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Difficulty))
	}
	if in.CoinbaseTx != nil {
		const prefix string = ",\"coinbaseTx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CoinbaseTx).MarshalEasyJSON(out)
	}
	if in.CoinbaseTxHex != "" {
		const prefix string = ",\"coinbaseTxHex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinbaseTxHex))
	}
	if len(in.CoinbaseMerkleProof) != 0 {
		const prefix string = ",\"coinbaseMerkleProof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.CoinbaseMerkleProof {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BTCBlockAux) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BTCBlockAux) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92cf561dEncodeGitlabComJaxnetJaxnetdTypesJaxjson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BTCBlockAux) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BTCBlockAux) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92cf561dDecodeGitlabComJaxnetJaxnetdTypesJaxjson6(l, v)
}
