image: docker:git
services:
  - docker:dind

stages:
  - build
  - lint
  - release

variables:
  DOCKER_TLS_CERTDIR: ""
  IMAGE: registry.gitlab.com/jaxnet/jaxnetd:$CI_COMMIT_REF_NAME

.before_script: &before_script
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-hub -y )'
    - eval $(ssh-agent -s)
    - echo "$JAX_KEY" > ./key.file
    - chmod 400 ./key.file
    - ssh-add ./key.file
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-keyscan -t rsa discretemind.com >> ~/.ssh/known_hosts

build:docker:
  stage: build
  <<: *before_script
  only:
    - master
    - tags
  tags:
    - shell
  script:
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE

build:release:
  stage: build
  image:
    name: goreleaser/goreleaser
    entrypoint: [ "" ]
  before_script:
    - echo Just to replace default
  script:
    - goreleaser release --snapshot --rm-dist
  tags:
    - docker
  artifacts:
    expire_in: 30 days
    paths:
      - dist
  only:
    - master

golangci-lint:
    image: golangci/golangci-lint:v1.43.0
    stage: lint
    allow_failure: true
    tags:
      - docker
    script:
      - golangci-lint run --new-from-rev=HEAD~ -v

release:
  stage: release
  image:
    name: goreleaser/goreleaser:latest
    entrypoint: [ "" ]
  variables:
    GITLAB_TOKEN: $CI_ACCESS_TOKEN
  before_script:
    - apk add build-base
  script:
    - goreleaser release --rm-dist
    - package_name=$(find . -type f -iname "*.deb" ) && curl -F package=@"$package_name"  https://$GEMFURY_TOKEN@push.fury.io/jaxnetd/
    - package_name=$(find . -type f -iname "*.rpm" ) && curl -F package=@"$package_name"  https://$GEMFURY_TOKEN@push.fury.io/jaxnetd/
  tags:
    - docker
  only:
    refs:
      - tags
