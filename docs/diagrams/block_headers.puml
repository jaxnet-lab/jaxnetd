@startuml
title Jaxnet Headers Hierarchy

'left to right direction

entity BTC_Header {
  //methods://
  - BlockHash(): **Hash**
  ---
  //fields://
  * version: **int32**
  * prev_block: **Hash**
  * merkle_root: **Hash**
  * timestamp: **uint32**
  * bits: **uint32**
  * nonce: **uint32**
  --
  - size: 80 bytes
  //[4 + 32 + 32 + 4 + 4 + 4]//
}


entity Beacon_Header {
  //methods://
  - BlockHash(): **Hash**
  - BeaconExclusiveHash(): **Hash** (without **btc_aux**)
  - PowHash: **Hash** == BTC_Header.Hash()
  --
  //fields://
  * version: **int32**
  * prev_block: **Hash**
  * merkle_root: **Hash**
  * bits: **uint32**
  * merge_mining_root: **Hash**
  * tree_encoding: **[]uint8**
  * shards: **uint32**
  * k: **uint32**
  * vote_k: **uint32**
  --
  * btc_header: **BTC_Header**
  * btc_coinbase: **Tx**
  * btc_tx_merkle_path: **[]Hash**
  --
  - size: 243 .. n MB
   //[4 + 32 + 32 + 4 + 4 + 32 + X + 4 + 4 + 4 + 80 + Y + Z]//
   //X - 1 .. 256//
   //Y - 10 .. n MB//
   //Z - 32 .. 32x1000//
   //[4 + 32 + 32 + 4 + 4 + 32 + 1 + 4 + 4 + 4 + 80 + 10 + 32]//
}

entity Shard_Header {
  //methods://
 - BlockHash(): **Hash**
 - Beacon(): **Hash** == Beacon_Header.Hash()
 - PowHash: **Hash** == BTC_Header.Hash()
 --
  //fields://
  * prev_block: **Hash**
  * merkle_root: **Hash**
  * bits: **uint32**
  * merge_mining_n: **uint32**
  --
  * beacon_header: **Beacon_Header**
  * beacon_coinbase: **Tx**
  * beacon_tx_merkle_path: **[]Hash**
  --
  - size: 346 .. n MB
   //[32 + 32 + 4 + 4 + X + Y + Z ]//
   //X - 232 .. n MB//
   //Y - 10 .. n MB
   //Z - 32 .. 32x1000//
   //[32 + 32 + 4 + 4 + 232 + 10 + 32]//


}

Beacon_Header ||- BTC_Header : > includes
Shard_Header ||- Beacon_Header : > includes


'BTC_Block ||- BTC_Header : > includes
'Beacon_Block ||- Beacon_Header : > includes
'Shard_Block ||- Shard_Header : > includes

@enduml
